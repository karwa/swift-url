{"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures"]]},"abstract":[{"type":"text","text":"A "},{"code":"SegmentedLine","type":"codeVoice"},{"type":"text","text":" is a one-dimensional space, where every location is assigned a value."}],"kind":"symbol","relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/com.karwa.WebURL\/s23CustomStringConvertibleP","doc:\/\/com.karwa.WebURL\/SQ"],"title":"Conforms To","type":"conformsTo"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Comparable","kind":"typeIdentifier","preciseIdentifier":"s:SL"}]}]},{"kind":"content","content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"SegmentedLine"},{"type":"text","text":" is effective when entire regions are assigned the same value."},{"type":"text","text":" "},{"type":"text","text":"For example, we can build a simple number line to tag ranges of integers; in this case,"},{"type":"text","text":" "},{"type":"text","text":"we’re tagging each range with an optional string."}]},{"type":"codeListing","code":["var line = SegmentedLine<Int, String?>(bounds: 0..<100, value: nil)","","\/\/ After setting values <5 to \"small\" and values >10 to \"large\",","\/\/ the gap is left with its previous value, \"medium\".","","line.set(0..<20,  to: \"medium\")","line.set(0..<5,   to: \"small\")","line.set(10..<60, to: \"large\")","print(line)","\/\/ | [0..<5]: \"small\" | [5..<10]: \"medium\" | [10..<60]: \"large\" | [60..<100]: nil |"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The locations on a "},{"code":"SegmentedLine","type":"codeVoice"},{"type":"text","text":" do not have to be integers - they can be any "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" type,"},{"type":"text","text":" "},{"type":"text","text":"including dates, strings, Unicode scalars (for building character sets), or "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" indexes."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the latter case, we can model a Collection’s elements as a line from its "},{"type":"codeVoice","code":"startIndex"},{"type":"text","text":" to its "},{"type":"codeVoice","code":"endIndex"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"allowing us to annotate regions of any Collection. In a way, it can be used as a generalized "},{"type":"codeVoice","code":"AttributedString"},{"type":"text","text":"."}]},{"type":"codeListing","code":["let string = \"Bob is feeling great\"","","\/\/ Create a SegmentedLine for the collection's contents.","\/\/ Start by setting a font attribute over the entire string.","","var tags = SegmentedLine(","  bounds: string.startIndex..<string.endIndex,","  value: [Font.custom(\"Comic Sans\")] as [Any]",")","","\/\/ Set each word to a different color.","\/\/ Use 'modify' to append the attribute, but only for the region","\/\/ we're modifying.","","for word: Substring in string.split(separator: \" \") {","  tags.modify(word.startIndex..<word.endIndex) { attributes in","    attributes.append(Color.random())","  }","}","","\/\/ Check the result.","\/\/ - ✅ Every segment still contains the font attribute.","\/\/ - ✅ Each word also contains its individual color attribute.","","for (range, attributes) in tags.segments {","  print(#\"\"\\#(string[range])\"\"#, \"-\", attributes)","}","","\/\/ \"Bob\"     [Font.custom(\"Comic Sans\"), Color.orange]","\/\/ \" \"       [Font.custom(\"Comic Sans\")]","\/\/ \"is\"      [Font.custom(\"Comic Sans\"), Color.green]","\/\/ \" \"       [Font.custom(\"Comic Sans\")]","\/\/ \"feeling\" [Font.custom(\"Comic Sans\"), Color.pink]","\/\/ \" \"       [Font.custom(\"Comic Sans\")]","\/\/ \"great\"   [Font.custom(\"Comic Sans\"), Color.yellow]"],"syntax":"swift"}]}],"topicSections":[{"identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Segments-swift.struct"],"title":"Structures"},{"identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/init(bounds:value:)"],"title":"Initializers"},{"identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/bounds","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/segments-swift.property"],"title":"Instance Properties"},{"identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments(while:)","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/modify(_:_:)","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/set(_:to:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/CustomStringConvertible-Implementations","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Equatable-Implementations"],"title":"Default Implementations","generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/unicodedatastructures\/segmentedline"]}],"metadata":{"roleHeading":"Structure","navigatorTitle":[{"kind":"identifier","text":"SegmentedLine"}],"modules":[{"name":"UnicodeDataStructures"}],"role":"symbol","symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SegmentedLine"}],"title":"SegmentedLine","externalID":"s:21UnicodeDataStructures13SegmentedLineV"},"sections":[],"references":{"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments(while:)":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments(while:)","title":"combineSegments(while:)","type":"topic","abstract":[{"type":"text","text":"Merges segments according to the given closure."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","text":"SegmentedLine"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Segments","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Segments","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")","kind":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments(while:)"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures":{"title":"UnicodeDataStructures","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","type":"topic","abstract":[],"url":"\/documentation\/unicodedatastructures","role":"collection"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/modify(_:_:)":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/modify(_:_:)","title":"modify(_:_:)","type":"topic","abstract":[{"type":"text","text":"Modifies the values assigned to the given region."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"modify"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">, ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"url":"\/documentation\/unicodedatastructures\/segmentedline\/modify(_:_:)"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/CustomStringConvertible-Implementations":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/CustomStringConvertible-Implementations","title":"CustomStringConvertible Implementations","type":"topic","abstract":[],"kind":"article","role":"collectionGroup","url":"\/documentation\/unicodedatastructures\/segmentedline\/customstringconvertible-implementations"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/Equatable-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Equatable-Implementations","abstract":[],"kind":"article","type":"topic","title":"Equatable Implementations","url":"\/documentation\/unicodedatastructures\/segmentedline\/equatable-implementations"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/init(bounds:value:)":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/init(bounds:value:)","title":"init(bounds:value:)","type":"topic","abstract":[{"type":"text","text":"Creates a new space with the given bounds and value."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"bounds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"url":"\/documentation\/unicodedatastructures\/segmentedline\/init(bounds:value:)"},"doc://com.karwa.WebURL/s23CustomStringConvertibleP":{"identifier":"doc:\/\/com.karwa.WebURL\/s23CustomStringConvertibleP","title":"Swift.CustomStringConvertible","type":"unresolvable"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/Segments-swift.struct":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Segments-swift.struct","abstract":[],"conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"navigatorTitle":[{"text":"Segments","kind":"identifier"}],"role":"symbol","title":"SegmentedLine.Segments","url":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"Segments","kind":"identifier"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/bounds":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/bounds","title":"bounds","type":"topic","abstract":[{"type":"text","text":"The bounds of this space."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"bounds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/unicodedatastructures\/segmentedline\/bounds"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/mapValues(_:)":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","title":"mapValues(_:)","type":"topic","abstract":[{"type":"text","text":"Returns a new "},{"type":"codeVoice","code":"SegmentedLine"},{"text":", created by transforming this line’s values using the given closure.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"mapValues","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"url":"\/documentation\/unicodedatastructures\/segmentedline\/mapvalues(_:)"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/set(_:to:)":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/set(_:to:)","title":"set(_:to:)","type":"topic","abstract":[{"type":"text","text":"Assigns a single value to all locations in the given region."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"set"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/unicodedatastructures\/segmentedline\/set(_:to:)"},"doc://com.karwa.WebURL/SQ":{"identifier":"doc:\/\/com.karwa.WebURL\/SQ","title":"Swift.Equatable","type":"unresolvable"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments()":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","title":"combineSegments()","type":"topic","abstract":[{"type":"text","text":"Merges segments of consecutive equal elements."}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"combineSegments","kind":"identifier"},{"text":"()","kind":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/segments-swift.property":{"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"segments","kind":"identifier"},{"text":": ","kind":"text"},{"text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Segments","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV"}],"role":"symbol","type":"topic","abstract":[{"type":"text","text":"The assigned regions of the space."}],"url":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.property","conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"segments","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/segments-swift.property","kind":"symbol"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"SegmentedLine"},{"text":" is a one-dimensional space, where every location is assigned a value.","type":"text"}],"navigatorTitle":[{"text":"SegmentedLine","kind":"identifier"}],"role":"symbol","title":"SegmentedLine","url":"\/documentation\/unicodedatastructures\/segmentedline","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","kind":"identifier"}]}}}