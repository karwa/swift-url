{"sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()"},"abstract":[{"text":"Merges segments of consecutive equal elements.","type":"text"}],"kind":"symbol","variants":[{"paths":["\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"()"}],"languages":["swift"],"platforms":["Linux"]}]},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"type":"text","text":"This function can be particularly effective at simplifying lines with lots of segments, as by mapping"},{"type":"text","text":" "},{"type":"text","text":"complex values to simplified ones (for example, mapping to an "},{"type":"codeVoice","code":"enum"},{"type":"text","text":" with fewer cases) using "},{"type":"reference","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","isActive":true},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"we can discard information that isn’t needed. This can lead to adjacent segments containing the same value"},{"type":"text","text":" "},{"type":"text","text":"more often - segments which can then be combined by this function."}],"type":"paragraph"},{"type":"codeListing","code":["\/\/ ℹ️ Imagine we have a complex SegmentedLine with lots of small segments","\/\/    capturing granular details, and we'd like to simplify it.","","enum ComplexData {","  case categoryA, categoryB, categoryC \/\/ ...","}","let complexLine: SegmentedLine<Int, ComplexData> = \/\/ ...","print(complexLine)","\/\/ | [0..<2]: categoryA | [2..<4]: categoryB | [4..<12]: categoryC | ...","","\/\/ 1️⃣ Perhaps we can map these to a smaller number of states.","","enum SimplifiedData {","  case valid, invalid","}","var simplifiedLine = complexLine.mapValues { complex in","  SimplifiedData(validating: complex)","}","print(simplifiedLine)","\/\/ | [0..<2]: valid | [2..<4]: valid | [4..<12]: valid | ...","","\/\/ 2️⃣ Notice that we have lots of segments for boundaries which","\/\/    which are no longer important. 'combineSegments' can clean them up.","","simplifiedLine.combineSegments()","print(simplifiedLine)","\/\/ | [0..<2000]: valid | [2000..<2024]: invalid | [2024..<2056]: valid | ..."],"syntax":"swift"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine"]]},"metadata":{"role":"symbol","externalID":"s:21UnicodeDataStructures13SegmentedLineVAASQR_rlE15combineSegmentsyyF","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}]},"modules":[{"name":"UnicodeDataStructures"}],"roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"()"}],"symbolKind":"method","title":"combineSegments()","extendedModule":"UnicodeDataStructures"},"references":{"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments()":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","title":"combineSegments()","type":"topic","abstract":[{"type":"text","text":"Merges segments of consecutive equal elements."}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"combineSegments","kind":"identifier"},{"text":"()","kind":"text"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures":{"title":"UnicodeDataStructures","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","type":"topic","abstract":[],"url":"\/documentation\/unicodedatastructures","role":"collection"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine":{"type":"topic","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"SegmentedLine"},{"text":" is a one-dimensional space, where every location is assigned a value.","type":"text"}],"navigatorTitle":[{"text":"SegmentedLine","kind":"identifier"}],"role":"symbol","title":"SegmentedLine","url":"\/documentation\/unicodedatastructures\/segmentedline","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","kind":"identifier"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/mapValues(_:)":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","title":"mapValues(_:)","type":"topic","abstract":[{"type":"text","text":"Returns a new "},{"type":"codeVoice","code":"SegmentedLine"},{"text":", created by transforming this line’s values using the given closure.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"mapValues","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":">","kind":"text"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"url":"\/documentation\/unicodedatastructures\/segmentedline\/mapvalues(_:)"}}}