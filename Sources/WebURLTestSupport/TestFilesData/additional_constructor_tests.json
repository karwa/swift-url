[
  "[Path] Single-dot components are skipped and do not get popped",
  {
    "input": "file:/a/./..",
    "base": "about:blank",
    "href": "file:///",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:/a/./././..",
    "base": "about:blank",
    "href": "file:///",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/",
    "search": "",
    "hash": ""
  },
  "[Path] Various oddball paths with base URLs.",
  {
    "input": ".",
    "base": "file:///a/b/",
    "href": "file:///a/b/",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/a/b/",
    "search": "",
    "hash": ""
  },
  {
    "input": "..",
    "base": "file:///a/b/c",
    "href": "file:///a/",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/a/",
    "search": "",
    "hash": ""
  },
  {
    "input": "...",
    "base": "file:///a/b/...",
    "href": "file:///a/b/...",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/a/b/...",
    "search": "",
    "hash": ""
  },
  {
    "input": "./.",
    "base": "file:///a/b/",
    "href": "file:///a/b/",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/a/b/",
    "search": "",
    "hash": ""
  },
  {
    "input": "../",
    "base": "http://example.com",
    "href": "http://example.com/",
    "protocol": "http:",
    "username": "",
    "password": "",
    "host": "example.com",
    "hostname": "example.com",
    "port": "",
    "pathname": "/",
    "search": "",
    "hash": ""
  },
  {
    "input": "..///",
    "base": "http://example.com",
    "href": "http://example.com///",
    "protocol": "http:",
    "username": "",
    "password": "",
    "host": "example.com",
    "hostname": "example.com",
    "port": "",
    "pathname": "///",
    "search": "",
    "hash": ""
  },
  {
    "input": "./.",
    "base": "non-special:///a/b/",
    "href": "non-special:///a/b/",
    "protocol": "non-special:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/a/b/",
    "search": "",
    "hash": ""
  },
  {
    "input": "./../1/2/../",
    "base": "non-special:///a/b/c/d",
    "href": "non-special:///a/b/1/",
    "protocol": "non-special:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/a/b/1/",
    "search": "",
    "hash": ""
  },
  {
    "input": "/",
    "base": "non-special://somehost",
    "href": "non-special://somehost/",
    "protocol": "non-special:",
    "username": "",
    "password": "",
    "host": "somehost",
    "hostname": "somehost",
    "port": "",
    "pathname": "/",
    "search": "",
    "hash": ""
  },
  {
    "input": "a/../../../../",
    "base": "http://example.com/1/2/3/4/5/6",
    "href": "http://example.com/1/2/",
    "protocol": "http:",
    "username": "",
    "password": "",
    "host": "example.com",
    "hostname": "example.com",
    "port": "",
    "pathname": "/1/2/",
    "search": "",
    "hash": ""
  },
  "[Path][Win] 0 slashes - Relative paths. The parser in the standard first checks to see if the drive is literally at the start of the string, and if not, copies in the base path components so the effective first component (e.g. after popping, etc) becomes the drive. \n\n What this means is that Windows drive components are resolved just like regular relative path components, unless they are at the very start of the string (where they force the whole thing to be treated like an absolute path).",
  {
    "input": "file:C|",
    "base": "about:blank",
    "href": "file:///C:",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/C:",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:./D|/../foo",
    "base": "about:blank",
    "href": "file:///D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:./D|/../foo",
    "base": "file:///bar",
    "href": "file:///D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:./D|/../foo",
    "base": "file:///bar/",
    "href": "file:///bar/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/bar/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:D|/../foo",
    "base": "file:///bar/",
    "href": "file:///D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:./D:/../foo",
    "base": "file:///C:/base1/base2/",
    "href": "file:///C:/base1/base2/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/C:/base1/base2/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:D|/../foo",
    "base": "file:///C:/base1/base2/",
    "href": "file:///D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:./D|/../foo",
    "base": "file:///bar/baz/qux/",
    "href": "file:///bar/baz/qux/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/bar/baz/qux/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:../../../D|/../foo",
    "base": "file:///bar/baz/qux/",
    "href": "file:///D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "foo",
    "base": "file:///C:/base1/base2/base3",
    "href": "file:///C:/base1/base2/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/C:/base1/base2/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "a",
    "base": "file:///C:",
    "href": "file:///C:/a",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/C:/a",
    "search": "",
    "hash": ""
  },
  "[Path][Win] 1 slash - Absolute paths. If the parser in the standard goes down the 'file slash' state, absolute paths will be checked to see if they literally begin with a Windows drive letter as their first component, and otherwise (despite being absolute), will be relative to the base URL's drive letter (if it has one). They only copy the drive from the base URL, not any other parts of the path. \n\n Note that this only applies to the 'file slash' state - i.e. '/C:/Windows' or 'file:C:/Windows', and means that in a path like '/./D|/../foo' with a base URL of 'file:///C:/bar/', the 'D|' drive in the input will not be recognised because of 'C:' in the base URL (however, without that 'C:' in the base, we would recognise 'D|' as a drive).",
  {
    "input": "file:/D|/../foo",
    "base": "file:///bar/baz/qux/",
    "href": "file:///D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:/.././D|/../foo",
    "base": "file:///bar/baz/qux/",
    "href": "file:///D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:/abc/def/../.././D|/../foo",
    "base": "file:///bar/baz/qux/",
    "href": "file:///D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:/abc/def/../../ghi/./D|/../foo",
    "base": "file:///bar/baz/qux/",
    "href": "file:///ghi/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/ghi/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:/D|/../foo",
    "base": "file:///C:/base1/base2/",
    "href": "file:///D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:/./D|/../foo",
    "base": "file:///C:/base1/base2/",
    "href": "file:///C:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/C:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "not-file:/abc/def/../.././D|/../foo",
    "base": "not-file:///bar/baz/qux/",
    "href": "not-file:/foo",
    "protocol": "not-file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/foo",
    "search": "",
    "hash": ""
  },
  "Absolute paths which don't have their own drive letter are still relative to the base URL drive. (because they go down the 'file slash' path).",
  {
    "input": "/hello",
    "base": "file:///C:/bar/",
    "href": "file:///C:/hello",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/C:/hello",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:/hello",
    "base": "file:///C:/bar/",
    "href": "file:///C:/hello",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/C:/hello",
    "search": "",
    "hash": ""
  },
  "But absolute paths from URLs with authorities are never relative to the base URL drive. (because they go down the 'path' path).",
  {
    "input": "file:///hello",
    "base": "file:///C:/bar/",
    "href": "file:///hello",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/hello",
    "search": "",
    "hash": ""
  },
  "[Path][Win] 2+ slashes - Misplaced authorities. The parser in the standard has a special 'file host' state, which checks to see if the component in the hostname position is a Windows drive and, if it is, forwards that to the regular 'path' state as a first component to the otherwise empty path. \n\n The 'file host' state never copies any path components from the base URL (if present), so it is kind of \"more absolute\" than even a regular '/usr/bin/'-style absolute path. In the sense that '/usr/bin/' with a base URL of 'file:///C:/' is 'file:///C:/usr/bin/', but '///usr/bin/' always results in 'file:///usr/bin/', regardless of whether the base URL contains a Windows drive letter.",
  {
    "input": "\\\\D|\\..\\foo",
    "base": "file:///C:/bar/baz/qux",
    "href": "file:///D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file://D|/../foo",
    "base": "file:///C:/bar/baz/qux",
    "href": "file:///D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file://./D|/../foo",
    "base": "file:///C:/bar/baz/qux",
    "href": "file://./D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": ".",
    "hostname": ".",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  "[Path] 3+ leading slashes.",
  {
    "input": "file:///././D|/../foo",
    "base": "file:///C:/bar/baz/qux",
    "href": "file:///D:/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "///usr/bin/x",
    "base": "file:///C:/foo/bar/baz/",
    "href": "file:///usr/bin/x",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/usr/bin/x",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:///usr/bin/x",
    "base": "file:///C:/foo/bar/baz/",
    "href": "file:///usr/bin/x",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/usr/bin/x",
    "search": "",
    "hash": ""
  },
  "[Path] Leading empty components disqualify a potential Windows drive.",
  {
    "input": "file://///////////C|/../D|/../foo",
    "base": "about:blank",
    "href": "file://///////////foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "///////////foo",
    "search": "",
    "hash": ""
  },
  "[Path][WEBURL-SPECIFIC]: Check that components which are deferred are not popped when flushing due to a '..' component.",
  {
    "input": "file:../C|/foo",
    "base": "file:///D:/base1/base2/base3",
    "href": "file:///D:/base1/C|/foo",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/D:/base1/C|/foo",
    "search": "",
    "hash": ""
  },
  {
    "input": "file:////C:/../..",
    "base": "about:blank",
    "href": "file:///",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/",
    "search": "",
    "hash": ""
  },
  "[OTHER] Check that query component is correctly not-copied for (file/special/non-special) schemes.",
  {
    "input": "pop",
    "base": "file://hostname/o1/o2?someQuery",
    "href": "file://hostname/o1/pop",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "hostname",
    "hostname": "hostname",
    "port": "",
    "pathname": "/o1/pop",
    "search": "",
    "hash": ""
  },
  {
    "input": "/pop",
    "base": "file://hostname/o1/o2?someQuery",
    "href": "file://hostname/pop",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "hostname",
    "hostname": "hostname",
    "port": "",
    "pathname": "/pop",
    "search": "",
    "hash": ""
  },
  {
    "input": "pop",
    "base": "http://hostname/o1/o2?someQuery",
    "href": "http://hostname/o1/pop",
    "protocol": "http:",
    "username": "",
    "password": "",
    "host": "hostname",
    "hostname": "hostname",
    "port": "",
    "pathname": "/o1/pop",
    "search": "",
    "hash": ""
  },
  {
    "input": "/pop",
    "base": "http://hostname/o1/o2?someQuery",
    "href": "http://hostname/pop",
    "protocol": "http:",
    "username": "",
    "password": "",
    "host": "hostname",
    "hostname": "hostname",
    "port": "",
    "pathname": "/pop",
    "search": "",
    "hash": ""
  },
  {
    "input": "pop",
    "base": "non-special://hostname/o1/o2?someQuery",
    "href": "non-special://hostname/o1/pop",
    "protocol": "non-special:",
    "username": "",
    "password": "",
    "host": "hostname",
    "hostname": "hostname",
    "port": "",
    "pathname": "/o1/pop",
    "search": "",
    "hash": ""
  },
  {
    "input": "/pop",
    "base": "non-special://hostname/o1/o2?someQuery",
    "href": "non-special://hostname/pop",
    "protocol": "non-special:",
    "username": "",
    "password": "",
    "host": "hostname",
    "hostname": "hostname",
    "port": "",
    "pathname": "/pop",
    "search": "",
    "hash": ""
  },
  "[OTHER] File URLs with invalid hostnames should fail to parse, even if the path begins with a Windows drive letter.",
  {
    "input": "file://^/C:/hello",
    "base": "about:blank",
    "failure": true
  },
  "[OTHER] Check we do not fail to yield a path when the input contributes nothing and the base URL has a 'nil' path.",
  {
    "input": "..",
    "base": "sc://a",
    "href": "sc://a/",
    "protocol": "sc:",
    "username": "",
    "password": "",
    "host": "a",
    "hostname": "a",
    "port": "",
    "pathname": "/",
    "search": "",
    "hash": ""
  },
  {
    "input": "../..///.",
    "base": "sc://a",
    "href": "sc://a///",
    "protocol": "sc:",
    "username": "",
    "password": "",
    "host": "a",
    "hostname": "a",
    "port": "",
    "pathname": "///",
    "search": "",
    "hash": ""
  },
  "[OTHER] Ensure that we always flush trailing empties if the first component doesn't get yielded.",
  {
    "input": "././././////b",
    "base": "sc://a",
    "href": "sc://a/////b",
    "protocol": "sc:",
    "username": "",
    "password": "",
    "host": "a",
    "hostname": "a",
    "port": "",
    "pathname": "/////b",
    "search": "",
    "hash": ""
  },
  "[OTHER] Code coverage for relative file paths which sum to nothing.",
  {
    "input": ".",
    "base": "file:///",
    "href": "file:///",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/",
    "search": "",
    "hash": ""
  },
  {
    "input": "../b/..",
    "base": "file:///a",
    "href": "file:///",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/",
    "search": "",
    "hash": ""
  },
  "[OTHER] Percent-encoded/mixed-case localhost.",
  {
    "input": "file://loc%61lhost/some/path",
    "base": "about:blank",
    "href": "file:///some/path",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/some/path",
    "search": "",
    "hash": ""
  },
  {
    "input": "file://locAlhost/some/path",
    "base": "about:blank",
    "href": "file:///some/path",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/some/path",
    "search": "",
    "hash": ""
  },
  "[OTHER] Double slash at start of base path (with host - not related to idempotence fix from Aug 2020).",
  {
    "input": "path",
    "base": "non-spec://host/..//p",
    "href": "non-spec://host//path",
    "protocol": "non-spec:",
    "username": "",
    "password": "",
    "host": "host",
    "hostname": "host",
    "port": "",
    "pathname": "//path",
    "search": "",
    "hash": ""
  },
  "[OTHER] Path idempotence fixes from Aug 2020.",
  {
    "input": "hello",
    "base": "web+demo:/.//not-a-host/test",
    "href": "web+demo:/.//not-a-host/hello",
    "protocol": "web+demo:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "//not-a-host/hello",
    "search": "",
    "hash": ""
  },
  {
    "input": "hello/..",
    "base": "web+demo:/.//not-a-host/test",
    "href": "web+demo:/.//not-a-host/",
    "protocol": "web+demo:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "//not-a-host/",
    "search": "",
    "hash": ""
  },
  {
    "input": "hello/../..",
    "base": "web+demo:/.//not-a-host/test",
    "href": "web+demo:/.//",
    "protocol": "web+demo:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "//",
    "search": "",
    "hash": ""
  },
  {
    "input": "hello/../../..",
    "base": "web+demo:/.//not-a-host/test",
    "href": "web+demo:/",
    "protocol": "web+demo:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/",
    "search": "",
    "hash": ""
  },
  "[IDNA] Unicode hostnames which get mapped to 'localhost'",
  {
    "input": "file://loC𝐀𝐋𝐇𝐨𝐬𝐭/usr/bin",
    "base": "about:blank",
    "href": "file:///usr/bin",
    "protocol": "file:",
    "username": "",
    "password": "",
    "host": "",
    "hostname": "",
    "port": "",
    "pathname": "/usr/bin",
    "search": "",
    "hash": ""
  }
]
