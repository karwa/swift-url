// Copyright The swift-url Contributors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ------------------------------------
//
// This is the script which generates Sources/IDNA/Generated/{MappingData/ValidationData}.swift
// It is written as a unit test, because for many reasons that's the easiest way to share code
// between the build-time/run-time portions of the UnicodeDataStructures library.
//
// To regenerate the database, set the build-time condition in the test method to 'true'
// and run the test. It'll write the files to a temporary folder and print the location to stdout.
//
// ------------------------------------

import Foundation
import UnicodeDataStructures
import XCTest

fileprivate func URLOfUnicodeDataFile(named name: String) -> URL? {
  Bundle.module.url(forResource: "TableDefinitions/\(name)", withExtension: "txt")
}

fileprivate let SourceFileHeader =
  #"""
  // Copyright The swift-url Contributors.
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.

  // ---------------------------------------------
  //                 DO NOT MODIFY
  // ---------------------------------------------
  // Generated by WebURL/Tests/UnicodeDataStructureTests/GenerateData

  """# + "\n"

final class GenerateData: XCTestCase {}

extension GenerateData {

  func testGeneratingIDNAMappingAndValidationData() throws {

    #if false  // Set to true to write the files to disk.

      let outputDir = URL(fileURLWithPath: NSTemporaryDirectory(), isDirectory: true)
        .appendingPathComponent("IDNA", isDirectory: true)
      try FileManager.default.createDirectory(at: outputDir, withIntermediateDirectories: true, attributes: nil)

      func writeFile(name: String, contents: String) throws {
        let destination = outputDir.appendingPathComponent(name, isDirectory: false)
        try Data(contents.utf8).write(to: destination)
        print("✏️ Wrote file to: \(destination)")
      }

    #else

      func writeFile(name: String, contents: String) throws {
        // No-op. Just check that we can generate the file.
      }

    #endif

    // Mapping data.
    let mappingDataFile = try String(contentsOf: URLOfUnicodeDataFile(named: "IdnaMappingTable")!)
    let mappingDB = IDNAMappingDatabase(parsing: mappingDataFile)
    do {
      let swiftSourceFile = SourceFileHeader + mappingDB.printAsSwiftSourceCode(name: "_idna_map")
      try writeFile(name: "MappingData.swift", contents: swiftSourceFile)
    }

    // Validation data.
    do {
      let derivedBidiClassTxt = try String(contentsOf: URLOfUnicodeDataFile(named: "DerivedBidiClass")!)
      let derivedJoiningTypeTxt = try String(contentsOf: URLOfUnicodeDataFile(named: "DerivedJoiningType")!)
      let db = IDNAValidationDatabase(
        mappingDB: mappingDB,
        derivedBidiClassTxt: derivedBidiClassTxt,
        derivedJoiningTypeTxt: derivedJoiningTypeTxt
      )
      let swiftSourceFile = SourceFileHeader + db.printAsSwiftSourceCode(name: "_idna_validate")
      try writeFile(name: "ValidationData.swift", contents: swiftSourceFile)
    }
  }
}
