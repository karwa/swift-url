{"interfaceLanguages":{"swift":[{"children":[{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"IDNA Compatibility Processing","type":"groupMarker"},{"path":"\/documentation\/idna\/idna\/tounicode(utf8:writer:)","title":"static func toUnicode<Source>(utf8: Source, writer: (AnyRandomAccessCollection<Unicode.Scalar>, Bool) -> Bool) -> Bool","type":"method"},{"path":"\/documentation\/idna\/idna\/toascii(utf8:bestrict:writer:)","title":"static func toASCII<Source>(utf8: Source, beStrict: Bool, writer: (UInt8) -> Void) -> Bool","type":"method"}],"path":"\/documentation\/idna\/idna","title":"IDNA","type":"enum"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/idna\/punycode\/decodeinplace(_:)","title":"static func decodeInPlace<Buffer>(inout Buffer) -> Punycode.DecodeInPlaceResult","type":"method"},{"path":"\/documentation\/idna\/punycode\/encode(_:into:)","title":"static func encode<Source>(Source, into: (UInt8) -> Void) -> Bool","type":"method"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/idna\/punycode\/decodeinplaceresult\/failed","title":"case failed","type":"case"},{"path":"\/documentation\/idna\/punycode\/decodeinplaceresult\/notpunycode","title":"case notPunycode","type":"case"},{"path":"\/documentation\/idna\/punycode\/decodeinplaceresult\/success(count:)","title":"case success(count: Int)","type":"case"}],"path":"\/documentation\/idna\/punycode\/decodeinplaceresult","title":"Punycode.DecodeInPlaceResult","type":"enum"}],"path":"\/documentation\/idna\/punycode","title":"Punycode","type":"enum"}],"path":"\/documentation\/idna","title":"IDNA","type":"module"},{"children":[{"title":"Protocols","type":"groupMarker"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/codepointdatabase_schema\/asciidata","title":"ASCIIData","type":"associatedtype"},{"path":"\/documentation\/unicodedatastructures\/codepointdatabase_schema\/unicodedata","title":"UnicodeData","type":"associatedtype"},{"title":"Type Properties","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/unicodedatastructures\/codepointdatabase_schema\/bmpindexbits-9azoi","title":"static var BMPIndexBits: Int","type":"property"}],"title":"CodePointDatabase_Schema Implementations","type":"groupMarker"}],"path":"\/documentation\/unicodedatastructures\/codepointdatabase_schema\/bmpindexbits-5zv1f","title":"static var BMPIndexBits: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/unicodedatastructures\/codepointdatabase_schema\/unicodedata(_:at:copyforstartingat:)-9bqp3","title":"static func unicodeData(Self.UnicodeData, at: UInt32, copyForStartingAt: UInt32) -> Self.UnicodeData","type":"method"}],"title":"CodePointDatabase_Schema Implementations","type":"groupMarker"}],"path":"\/documentation\/unicodedatastructures\/codepointdatabase_schema\/unicodedata(_:at:copyforstartingat:)-8aukl","title":"static func unicodeData(Self.UnicodeData, at: UInt32, copyForStartingAt: UInt32) -> Self.UnicodeData","type":"method"}],"path":"\/documentation\/unicodedatastructures\/codepointdatabase_schema","title":"CodePointDatabase_Schema","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/hasrawstorage\/rawstorage","title":"RawStorage","type":"associatedtype"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/hasrawstorage\/init(storage:)","title":"init(storage: Self.RawStorage)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/hasrawstorage\/storage","title":"var storage: Self.RawStorage","type":"property"}],"path":"\/documentation\/unicodedatastructures\/hasrawstorage","title":"HasRawStorage","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/codepointdatabase\/bmpindex\/indexstorage","title":"CodePointDatabase.BMPIndex.IndexStorage","type":"typealias"}],"path":"\/documentation\/unicodedatastructures\/codepointdatabase\/bmpindex","title":"CodePointDatabase.BMPIndex","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/codepointdatabase\/init(asciidata:bmpindex:bmpdata:nonbmpdata:)","title":"init(asciiData: [Schema.ASCIIData.RawStorage], bmpIndex: [CodePointDatabase<Schema>.BMPIndex.IndexStorage], bmpData: CodePointDatabase<Schema>.SplitTable<UInt16, Schema.UnicodeData.RawStorage>, nonbmpData: [CodePointDatabase<Schema>.SplitTable<UInt16, Schema.UnicodeData.RawStorage>])","type":"init"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/codepointdatabase\/subscript(_:)","title":"subscript(Unicode.Scalar) -> CodePointDatabase<Schema>.LookupResult","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/codepointdatabase\/splittable","title":"CodePointDatabase.SplitTable","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/codepointdatabase\/lookupresult\/ascii(_:)","title":"case ascii(Schema.ASCIIData)","type":"case"},{"path":"\/documentation\/unicodedatastructures\/codepointdatabase\/lookupresult\/nonascii(_:startcodepoint:)","title":"case nonAscii(Schema.UnicodeData, startCodePoint: UInt32)","type":"case"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/codepointdatabase\/lookupresult\/value","title":"var value: Schema.ASCIIData","type":"property"}],"path":"\/documentation\/unicodedatastructures\/codepointdatabase\/lookupresult","title":"CodePointDatabase.LookupResult","type":"enum"}],"path":"\/documentation\/unicodedatastructures\/codepointdatabase","title":"CodePointDatabase","type":"struct"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata\/init(storage:)","title":"init(storage: UInt16)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata\/ismapped","title":"var isMapped: Bool","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata\/replacement","title":"var replacement: Unicode.Scalar","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata\/status-swift.property","title":"var status: IDNAMappingData.ASCIIData.Status","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata\/storage","title":"var storage: UInt16","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata\/rawstorage","title":"IDNAMappingData.ASCIIData.RawStorage","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata\/status-swift.enum\/disallowed_std3_valid","title":"case disallowed_STD3_valid","type":"case"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata\/status-swift.enum\/mapped","title":"case mapped","type":"case"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata\/status-swift.enum\/valid","title":"case valid","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata\/status-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata\/status-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata\/status-swift.enum","title":"IDNAMappingData.ASCIIData.Status","type":"enum"}],"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/asciidata","title":"IDNAMappingData.ASCIIData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/init(storage:)","title":"init(storage: UInt32)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/mapping-swift.property","title":"var mapping: IDNAMappingData.UnicodeData.Mapping?","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/status-swift.property","title":"var status: IDNAMappingData.UnicodeData.Status","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/storage","title":"var storage: UInt32","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/rawstorage","title":"IDNAMappingData.UnicodeData.RawStorage","type":"typealias"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/mapping-swift.enum\/rebased(origin:)","title":"case rebased(origin: UInt32)","type":"case"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/mapping-swift.enum\/single(_:)","title":"case single(UInt32)","type":"case"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/mapping-swift.enum\/table(_:)","title":"case table(ReplacementsTable.Index)","type":"case"}],"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/mapping-swift.enum","title":"IDNAMappingData.UnicodeData.Mapping","type":"enum"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/status-swift.enum\/deviation","title":"case deviation","type":"case"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/status-swift.enum\/disallowed","title":"case disallowed","type":"case"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/status-swift.enum\/disallowed_std3_mapped","title":"case disallowed_STD3_mapped","type":"case"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/status-swift.enum\/disallowed_std3_valid","title":"case disallowed_STD3_valid","type":"case"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/status-swift.enum\/ignored","title":"case ignored","type":"case"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/status-swift.enum\/mapped","title":"case mapped","type":"case"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/status-swift.enum\/valid","title":"case valid","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/status-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/status-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/status-swift.enum","title":"IDNAMappingData.UnicodeData.Status","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata","title":"IDNAMappingData.UnicodeData","type":"struct"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/bmpindexbits-3r6pv","title":"static var BMPIndexBits: Int","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/bmpindexbits-5dk25","title":"static var BMPIndexBits: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata(_:at:copyforstartingat:)-29ng7","title":"static func unicodeData(Self.UnicodeData, at: UInt32, copyForStartingAt: UInt32) -> Self.UnicodeData","type":"method"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/unicodedata(_:at:copyforstartingat:)-6hp1o","title":"static func unicodeData(IDNAMappingData.UnicodeData, at: UInt32, copyForStartingAt: UInt32) -> IDNAMappingData.UnicodeData","type":"method"}],"path":"\/documentation\/unicodedatastructures\/idnamappingdata\/codepointdatabase_schema-implementations","title":"CodePointDatabase_Schema Implementations","type":"symbol"}],"path":"\/documentation\/unicodedatastructures\/idnamappingdata","title":"IDNAMappingData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdatabase\/init(parsing:)","title":"init(parsing: String)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnamappingdatabase\/printasswiftsourcecode(name:)","title":"func printAsSwiftSourceCode(name: String) -> String","type":"method"}],"path":"\/documentation\/unicodedatastructures\/idnamappingdatabase","title":"IDNAMappingDatabase","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/bidiinfo-swift.struct\/==(_:_:)","title":"static func == (IDNAValidationData.ValidationFlags.BidiInfo, IDNAValidationData.ValidationFlags.BidiInfo) -> Bool","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/bidiinfo-swift.struct\/an","title":"static var AN: IDNAValidationData.ValidationFlags.BidiInfo","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/bidiinfo-swift.struct\/en","title":"static var EN: IDNAValidationData.ValidationFlags.BidiInfo","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/bidiinfo-swift.struct\/esorcsoretoronorbn","title":"static var ESorCSorETorONorBN: IDNAValidationData.ValidationFlags.BidiInfo","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/bidiinfo-swift.struct\/l","title":"static var L: IDNAValidationData.ValidationFlags.BidiInfo","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/bidiinfo-swift.struct\/nsm","title":"static var NSM: IDNAValidationData.ValidationFlags.BidiInfo","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/bidiinfo-swift.struct\/roral","title":"static var RorAL: IDNAValidationData.ValidationFlags.BidiInfo","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/bidiinfo-swift.struct\/disallowed","title":"static var disallowed: IDNAValidationData.ValidationFlags.BidiInfo","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/bidiinfo-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/bidiinfo-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/bidiinfo-swift.struct","title":"IDNAValidationData.ValidationFlags.BidiInfo","type":"struct"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/joiningtype-swift.struct\/==(_:_:)","title":"static func == (IDNAValidationData.ValidationFlags.JoiningType, IDNAValidationData.ValidationFlags.JoiningType) -> Bool","type":"op"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/joiningtype-swift.struct\/d","title":"static var D: IDNAValidationData.ValidationFlags.JoiningType","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/joiningtype-swift.struct\/l","title":"static var L: IDNAValidationData.ValidationFlags.JoiningType","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/joiningtype-swift.struct\/r","title":"static var R: IDNAValidationData.ValidationFlags.JoiningType","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/joiningtype-swift.struct\/t","title":"static var T: IDNAValidationData.ValidationFlags.JoiningType","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/joiningtype-swift.struct\/other","title":"static var other: IDNAValidationData.ValidationFlags.JoiningType","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/joiningtype-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/joiningtype-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/joiningtype-swift.struct","title":"IDNAValidationData.ValidationFlags.JoiningType","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/init(storage:)","title":"init(storage: UInt8)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/bidiinfo-swift.property","title":"var bidiInfo: IDNAValidationData.ValidationFlags.BidiInfo","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/ismark","title":"var isMark: Bool","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/isvirama","title":"var isVirama: Bool","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/joiningtype-swift.property","title":"var joiningType: IDNAValidationData.ValidationFlags.JoiningType","type":"property"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/storage","title":"var storage: UInt8","type":"property"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/rawstorage","title":"IDNAValidationData.ValidationFlags.RawStorage","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/validationflags","title":"IDNAValidationData.ValidationFlags","type":"struct"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/asciidata","title":"IDNAValidationData.ASCIIData","type":"typealias"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/unicodedata","title":"IDNAValidationData.UnicodeData","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/bmpindexbits","title":"static var BMPIndexBits: Int","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/unicodedata(_:at:copyforstartingat:)","title":"static func unicodeData(Self.UnicodeData, at: UInt32, copyForStartingAt: UInt32) -> Self.UnicodeData","type":"method"}],"path":"\/documentation\/unicodedatastructures\/idnavalidationdata\/codepointdatabase_schema-implementations","title":"CodePointDatabase_Schema Implementations","type":"symbol"}],"path":"\/documentation\/unicodedatastructures\/idnavalidationdata","title":"IDNAValidationData","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdatabase\/init(mappingdb:derivedbidiclasstxt:derivedjoiningtypetxt:)","title":"init(mappingDB: IDNAMappingDatabase, derivedBidiClassTxt: String, derivedJoiningTypeTxt: String)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/idnavalidationdatabase\/printasswiftsourcecode(name:)","title":"func printAsSwiftSourceCode(name: String) -> String","type":"method"}],"path":"\/documentation\/unicodedatastructures\/idnavalidationdatabase","title":"IDNAValidationDatabase","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/replacementstable\/index\/length","title":"var length: UInt8","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/replacementstable\/index\/get(table:)","title":"func get(table: [Unicode.Scalar]) -> ArraySlice<Unicode.Scalar>","type":"method"}],"path":"\/documentation\/unicodedatastructures\/replacementstable\/index","title":"ReplacementsTable.Index","type":"struct"}],"path":"\/documentation\/unicodedatastructures\/replacementstable","title":"ReplacementsTable","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout SegmentedLine<Bound, Value>.Segments.Index, offsetBy: Int)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/==(_:_:)","title":"static func == (SegmentedLine<Bound, Value>.Segments.Index, SegmentedLine<Bound, Value>.Segments.Index) -> Bool","type":"op"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/_(_:_:)-6vlba","title":"static func < (SegmentedLine<Bound, Value>.Segments.Index, SegmentedLine<Bound, Value>.Segments.Index) -> Bool","type":"op"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/'...(_:)-5y4q7","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/'...(_:)-bi2p","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/_(_:_:)-12itl","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/_=(_:_:)-2ag0q","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/_=(_:_:)-90m69","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index","title":"SegmentedLine.Segments.Index","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/count-2nd5j","title":"var count: Int","type":"property"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/count-3pbmp","title":"var count: Int","type":"property"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/endindex","title":"var endIndex: SegmentedLine<Bound, Value>.Segments.Index","type":"property"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/isempty-2exwp","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/isempty-68l8q","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/startindex","title":"var startIndex: SegmentedLine<Bound, Value>.Segments.Index","type":"property"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/underestimatedcount-2e1q5","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/distance(from:to:)","title":"func distance(from: SegmentedLine<Bound, Value>.Segments.Index, to: SegmentedLine<Bound, Value>.Segments.Index) -> Int","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/formindex(after:)","title":"func formIndex(after: inout SegmentedLine<Bound, Value>.Segments.Index)","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index(_:offsetby:)","title":"func index(SegmentedLine<Bound, Value>.Segments.Index, offsetBy: Int) -> SegmentedLine<Bound, Value>.Segments.Index","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index(after:)","title":"func index(after: SegmentedLine<Bound, Value>.Segments.Index) -> SegmentedLine<Bound, Value>.Segments.Index","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/map(_:)-9i38f","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/subscript(_:)-2xdze","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/subscript(_:)-4p4f8","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/subscript(_:)-4qgi0","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/subscript(_:)-51ugz","title":"subscript(SegmentedLine<Bound, Value>.Segments.Index) -> (range: Range<Bound>, value: Value)","type":"subscript"}],"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/formindex(before:)","title":"func formIndex(before: inout SegmentedLine<Bound, Value>.Segments.Index)","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/index(before:)","title":"func index(before: SegmentedLine<Bound, Value>.Segments.Index) -> SegmentedLine<Bound, Value>.Segments.Index","type":"method"}],"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/underestimatedcount-1ta6c","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/flatmap(_:)-3ogv9","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/flatmap(_:)-6pja8","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/map(_:)-5vx03","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct","title":"SegmentedLine.Segments","type":"struct"},{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/init(bounds:value:)","title":"init(bounds: Range<Bound>, value: Value)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/bounds","title":"var bounds: Range<Bound>","type":"property"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.property","title":"var segments: SegmentedLine<Bound, Value>.Segments","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()","title":"func combineSegments()","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments(while:)","title":"func combineSegments(while: (inout SegmentedLine<Bound, Value>.Segments.Element, SegmentedLine<Bound, Value>.Segments.Element) -> Bool)","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/mapvalues(_:)","title":"func mapValues<T>((Value) throws -> T) rethrows -> SegmentedLine<Bound, T>","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/modify(_:_:)","title":"func modify(Range<Bound>, (inout Value) -> Void)","type":"method"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/set(_:to:)","title":"func set(Range<Bound>, to: Value)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/unicodedatastructures\/segmentedline\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/unicodedatastructures\/segmentedline\/==(_:_:)","title":"static func == (SegmentedLine<Bound, Value>, SegmentedLine<Bound, Value>) -> Bool","type":"op"}],"path":"\/documentation\/unicodedatastructures\/segmentedline\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/unicodedatastructures\/segmentedline","title":"SegmentedLine","type":"struct"}],"path":"\/documentation\/unicodedatastructures","title":"UnicodeDataStructures","type":"module"},{"children":[{"title":"Creating or Modifying URLs","type":"groupMarker"},{"children":[{"title":"URL Strings","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/init(_:)","title":"init?<StringType>(StringType)","type":"init"},{"path":"\/documentation\/weburl\/weburl\/init(utf8:)","title":"init?<UTF8Bytes>(utf8: UTF8Bytes)","type":"init"},{"path":"\/documentation\/weburl\/weburl\/init(filepath:format:)","title":"init<StringType>(filePath: StringType, format: FilePathFormat) throws","type":"init"},{"path":"\/documentation\/weburl\/weburl\/serialized(excludingfragment:)","title":"func serialized(excludingFragment: Bool) -> String","type":"method"},{"title":"Relative References","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/resolve(_:)","title":"func resolve<StringType>(StringType) -> WebURL?","type":"method"},{"title":"URL Components","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/scheme","title":"var scheme: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/username","title":"var username: String?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/password","title":"var password: String?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/hostname","title":"var hostname: String?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/port","title":"var port: Int?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/portorknowndefault","title":"var portOrKnownDefault: Int?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/path","title":"var path: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/query","title":"var query: String?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/fragment","title":"var fragment: String?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/hasopaquepath","title":"var hasOpaquePath: Bool","type":"property"},{"title":"Path Components","type":"groupMarker"},{"children":[{"title":"Appending or Inserting Path Components","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/append(_:)","title":"func append<Component>(Component) -> WebURL.PathComponents.Index","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/append(contentsof:)","title":"func append<Components>(contentsOf: Components) -> Range<WebURL.PathComponents.Index>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/insert(_:at:)","title":"func insert<Component>(Component, at: WebURL.PathComponents.Index) -> Range<WebURL.PathComponents.Index>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/insert(contentsof:at:)","title":"func insert<Components>(contentsOf: Components, at: WebURL.PathComponents.Index) -> Range<WebURL.PathComponents.Index>","type":"method"},{"title":"Removing Path Components","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/removelast(_:)","title":"func removeLast(Int)","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/remove(at:)","title":"func remove(at: WebURL.PathComponents.Index) -> WebURL.PathComponents.Index","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/removesubrange(_:)","title":"func removeSubrange(Range<WebURL.PathComponents.Index>) -> WebURL.PathComponents.Index","type":"method"},{"title":"Replacing Path Components","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/replacecomponent(at:with:)","title":"func replaceComponent<Component>(at: WebURL.PathComponents.Index, with: Component) -> Range<WebURL.PathComponents.Index>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/replacesubrange(_:with:)","title":"func replaceSubrange<Components>(Range<WebURL.PathComponents.Index>, with: Components) -> Range<WebURL.PathComponents.Index>","type":"method"},{"title":"Directory Paths","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/ensuredirectorypath()","title":"func ensureDirectoryPath()","type":"method"},{"title":"Manually Percent-Encoding or Decoding","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/replacesubrange(_:withpercentencodedcomponents:)","title":"func replaceSubrange<Components>(Range<WebURL.PathComponents.Index>, withPercentEncodedComponents: Components) -> Range<WebURL.PathComponents.Index>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/subscript(raw:)","title":"subscript(raw _: WebURL.PathComponents.Index) -> String","type":"subscript"},{"title":"View Type","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/+=(_:_:)","title":"static func += <Components>(inout WebURL.PathComponents, Components)","type":"op"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/formindex(before:)","title":"func formIndex(before: inout WebURL.PathComponents.Index)","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index(before:)","title":"func index(before: WebURL.PathComponents.Index) -> WebURL.PathComponents.Index","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/joined(separator:)","title":"func joined(separator: String) -> String","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index\/_(_:_:)-8t9w0","title":"static func < (WebURL.PathComponents.Index, WebURL.PathComponents.Index) -> Bool","type":"op"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index\/'...(_:)-841q","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index\/'...(_:)-96cns","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index\/_(_:_:)-5iwfz","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index\/_=(_:_:)-6ms6h","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index\/_=(_:_:)-90xit","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index","title":"WebURL.PathComponents.Index","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/endindex","title":"var endIndex: WebURL.PathComponents.Index","type":"property"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/startindex","title":"var startIndex: WebURL.PathComponents.Index","type":"property"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/underestimatedcount-38qyw","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/distance(from:to:)","title":"func distance(from: WebURL.PathComponents.Index, to: WebURL.PathComponents.Index) -> Int","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/formindex(after:)","title":"func formIndex(after: inout WebURL.PathComponents.Index)","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index(after:)","title":"func index(after: WebURL.PathComponents.Index) -> WebURL.PathComponents.Index","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/map(_:)-3yq92","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/subscript(_:)-3jm9t","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/subscript(_:)-46pkv","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/subscript(_:)-52dwb","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/subscript(_:)-6qqgu","title":"subscript(WebURL.PathComponents.Index) -> String","type":"subscript"}],"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/underestimatedcount-4e2rn","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/flatmap(_:)-3bk6o","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/flatmap(_:)-5twx9","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/joined()","title":"func joined() -> FlattenSequence<Self>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/map(_:)-8am0g","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.struct","title":"WebURL.PathComponents","type":"struct"}],"path":"\/documentation\/weburl\/weburl\/pathcomponents-swift.property","title":"var pathComponents: WebURL.PathComponents","type":"property"},{"title":"Query Parameters","type":"groupMarker"},{"children":[{"title":"Getting the Value of a Key","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/get(_:)","title":"func get<StringType>(StringType) -> String?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/getall(_:)","title":"func getAll<StringType>(StringType) -> [String]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/contains(_:)","title":"func contains<StringType>(StringType) -> Bool","type":"method"},{"title":"Setting the Value of a Key","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/set(_:to:)","title":"func set<StringType>(StringType, to: StringType?)","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/remove(_:)","title":"func remove<StringType>(StringType)","type":"method"},{"title":"Appending Key-Value Pairs","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/append(_:value:)","title":"func append<StringType>(StringType, value: StringType)","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/append(contentsof:)-3zb6r","title":"func append<CollectionType, StringType>(contentsOf: CollectionType)","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/append(contentsof:)-3vyt6","title":"func append<CollectionType, StringType>(contentsOf: CollectionType)","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/append(contentsof:)-194p2","title":"func append<StringType>(contentsOf: [StringType : StringType])","type":"method"},{"title":"All Key-Value Pairs","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/allkeyvaluepairs","title":"var allKeyValuePairs: WebURL.FormEncodedQueryParameters.KeyValuePairs","type":"property"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/removeall()","title":"func removeAll()","type":"method"},{"title":"View Type","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/iterator\/next()","title":"func next() -> (String, String)?","type":"method"}],"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/iterator","title":"WebURL.FormEncodedQueryParameters.KeyValuePairs.Iterator","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/isempty","title":"var isEmpty: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/makeiterator()","title":"func makeIterator() -> WebURL.FormEncodedQueryParameters.KeyValuePairs.Iterator","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/underestimatedcount","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> DropWhileSequence<Self>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/dropfirst(_:)","title":"func dropFirst(Int) -> DropFirstSequence<Self>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/droplast(_:)","title":"func dropLast(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/flatmap(_:)-451pc","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/flatmap(_:)-7j2ig","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/map(_:)","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/prefix(_:)","title":"func prefix(Int) -> PrefixSequence<Self>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [ArraySlice<Self.Element>]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/suffix(_:)","title":"func suffix(Int) -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/keyvaluepairs","title":"WebURL.FormEncodedQueryParameters.KeyValuePairs","type":"struct"},{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/+=(_:_:)-3zg6d","title":"static func += <CollectionType, StringType>(inout WebURL.FormEncodedQueryParameters, CollectionType)","type":"op"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/+=(_:_:)-4dzu9","title":"static func += <CollectionType, StringType>(inout WebURL.FormEncodedQueryParameters, CollectionType)","type":"op"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/+=(_:_:)-5mlyq","title":"static func += <StringType>(inout WebURL.FormEncodedQueryParameters, [StringType : StringType])","type":"op"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters\/subscript(dynamicmember:)","title":"subscript(dynamicMember _: String) -> String?","type":"subscript"}],"path":"\/documentation\/weburl\/weburl\/formencodedqueryparameters","title":"WebURL.FormEncodedQueryParameters","type":"struct"}],"path":"\/documentation\/weburl\/weburl\/formparams","title":"var formParams: WebURL.FormEncodedQueryParameters","type":"property"},{"title":"Host and Origin","type":"groupMarker"},{"children":[{"title":"Kinds of Host","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/domain(_:)","title":"case domain(WebURL.Domain)","type":"case"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/ipv4address(_:)","title":"case ipv4Address(IPv4Address)","type":"case"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/ipv6address(_:)","title":"case ipv6Address(IPv6Address)","type":"case"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/opaque(_:)","title":"case opaque(String)","type":"case"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/empty","title":"case empty","type":"case"},{"title":"Parsing a Host from a String and Context","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/init(_:scheme:)","title":"init?<StringType>(StringType, scheme: String)","type":"init"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/init(utf8:scheme:)","title":"init?<UTF8Bytes>(utf8: UTF8Bytes, scheme: String)","type":"init"},{"title":"Obtaining a Host’s String Representation","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/serialized","title":"var serialized: String","type":"property"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/codingkeys\/hostname","title":"case hostname","type":"case"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/codingkeys\/kind","title":"case kind","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/codingkeys\/debugdescription","title":"var debugDescription: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/codingkeys\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/codingkeys\/codingkey-implementations","title":"CodingKey Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/codingkeys\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/codingkeys\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/codingkeys","title":"WebURL.Host.CodingKeys","type":"enum"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/weburl\/host-swift.enum\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/weburl\/host-swift.enum","title":"WebURL.Host","type":"enum"},{"path":"\/documentation\/weburl\/weburl\/host-swift.property","title":"var host: WebURL.Host?","type":"property"},{"children":[{"title":"Checking If an Origin Is Opaque","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/origin-swift.struct\/isopaque","title":"var isOpaque: Bool","type":"property"},{"title":"Obtaining an Origin’s String Representation","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/origin-swift.struct\/serialized","title":"var serialized: String","type":"property"},{"title":"Origin Type","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/origin-swift.struct\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/weburl\/weburl\/origin-swift.struct\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/origin-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/weburl\/origin-swift.struct\/==(_:_:)","title":"static func == (WebURL.Origin, WebURL.Origin) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/weburl\/origin-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/origin-swift.struct\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/weburl\/weburl\/origin-swift.struct\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/weburl\/origin-swift.struct","title":"WebURL.Origin","type":"struct"}],"path":"\/documentation\/weburl\/weburl\/origin-swift.property","title":"var origin: WebURL.Origin","type":"property"},{"title":"Responding to Setter Failures","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/setscheme(_:)","title":"func setScheme<StringType>(StringType) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/setusername(_:)","title":"func setUsername<StringType>(StringType?) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/setpassword(_:)","title":"func setPassword<StringType>(StringType?) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/sethostname(_:)","title":"func setHostname<StringType>(StringType?) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/setport(_:)","title":"func setPort(Int?) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/setpath(_:)","title":"func setPath<StringType>(StringType) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/setquery(_:)","title":"func setQuery<StringType>(StringType?) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/setfragment(_:)","title":"func setFragment<StringType>(StringType?) throws","type":"method"},{"title":"Other Views","type":"groupMarker"},{"children":[{"title":"Reading a URL’s Components","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/scheme","title":"var scheme: WebURL.UTF8View.SubSequence","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/username","title":"var username: WebURL.UTF8View.SubSequence?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/password","title":"var password: WebURL.UTF8View.SubSequence?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/hostname","title":"var hostname: Slice<WebURL.UTF8View>?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/port","title":"var port: WebURL.UTF8View.SubSequence?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/path","title":"var path: WebURL.UTF8View.SubSequence","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/query","title":"var query: WebURL.UTF8View.SubSequence?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/fragment","title":"var fragment: WebURL.UTF8View.SubSequence?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/pathcomponent(_:)","title":"func pathComponent(WebURL.PathComponents.Index) -> WebURL.UTF8View.SubSequence","type":"method"},{"title":"Replacing a URL’s Components","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/setscheme(_:)","title":"func setScheme<UTF8Bytes>(UTF8Bytes) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/setusername(_:)","title":"func setUsername<UTF8Bytes>(UTF8Bytes?) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/setpassword(_:)","title":"func setPassword<UTF8Bytes>(UTF8Bytes?) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/sethostname(_:)","title":"func setHostname<UTF8Bytes>(UTF8Bytes?) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/setpath(_:)","title":"func setPath<UTF8Bytes>(UTF8Bytes) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/setquery(_:)","title":"func setQuery<UTF8Bytes>(UTF8Bytes?) throws","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/setfragment(_:)","title":"func setFragment<UTF8Bytes>(UTF8Bytes?) throws","type":"method"},{"title":"Resolving Relative References","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/resolve(_:)","title":"func resolve<UTF8Bytes>(UTF8Bytes) -> WebURL?","type":"method"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/withunsafebufferpointer(_:)","title":"func withUnsafeBufferPointer<R>((UnsafeBufferPointer<UInt8>) throws -> R) rethrows -> R","type":"method"},{"title":"View Type","type":"groupMarker"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/reversed()","title":"func reversed() -> ReversedCollection<Self>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"}],"path":"\/documentation\/weburl\/weburl\/utf8view\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/count-4oogd","title":"var count: Int","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/count-54l2r","title":"var count: Int","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/endindex","title":"var endIndex: WebURL.UTF8View.Index","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/isempty","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/startindex","title":"var startIndex: WebURL.UTF8View.Index","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/underestimatedcount-47qem","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/drop(while:)","title":"func drop(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/map(_:)-80em8","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/percentencodedstring(using:)-9kh98","title":"func percentEncodedString<EncodeSet>(using: EncodeSet._Member) -> String","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/percentencodedstring(using:)-gxpy","title":"func percentEncodedString<EncodeSet>(using: EncodeSet) -> String","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/prefix(while:)","title":"func prefix(while: (Self.Element) throws -> Bool) rethrows -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/subscript(_:)-49fba","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/subscript(_:)-8jot","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/subscript(_:)-8z3sw","title":"subscript(WebURL.UTF8View.Index) -> WebURL.UTF8View.Element","type":"subscript"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/subscript(_:)-9rvlc","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/index","title":"WebURL.UTF8View.Index","type":"typealias"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/indices-swift.typealias","title":"WebURL.UTF8View.Indices","type":"typealias"}],"path":"\/documentation\/weburl\/weburl\/utf8view\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/indices-swift.property","title":"var indices: Range<WebURL.UTF8View.Index>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/distance(from:to:)","title":"func distance(from: WebURL.UTF8View.Index, to: WebURL.UTF8View.Index) -> Int","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/formindex(after:)","title":"func formIndex(after: inout WebURL.UTF8View.Index)","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/formindex(before:)","title":"func formIndex(before: inout WebURL.UTF8View.Index)","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/index(_:offsetby:)","title":"func index(WebURL.UTF8View.Index, offsetBy: Int) -> WebURL.UTF8View.Index","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/index(after:)","title":"func index(after: WebURL.UTF8View.Index) -> WebURL.UTF8View.Index","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/index(before:)","title":"func index(before: WebURL.UTF8View.Index) -> WebURL.UTF8View.Index","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/subscript(_:)-806fz","title":"subscript(Range<WebURL.UTF8View.Index>) -> Slice<WebURL.UTF8View>","type":"subscript"}],"path":"\/documentation\/weburl\/weburl\/utf8view\/randomaccesscollection-implementations","title":"RandomAccessCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/lazy","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/underestimatedcount-360i2","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/compactmap(_:)","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/filter(_:)","title":"func filter((Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/flatmap(_:)-48ky","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/flatmap(_:)-96rqx","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/map(_:)-900d9","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/withcontiguousstorageifavailable(_:)-4uk4t","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<UInt8>) throws -> R) rethrows -> R?","type":"method"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/withcontiguousstorageifavailable(_:)-9kmc8","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/utf8view\/element","title":"WebURL.UTF8View.Element","type":"typealias"}],"path":"\/documentation\/weburl\/weburl\/utf8view\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/weburl\/utf8view","title":"WebURL.UTF8View","type":"struct"}],"path":"\/documentation\/weburl\/weburl\/utf8","title":"var utf8: WebURL.UTF8View","type":"property"},{"children":[{"title":"Reading and Writing a URL’s Components","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/scheme","title":"var scheme: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/username","title":"var username: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/password","title":"var password: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/hostname","title":"var hostname: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/host","title":"var host: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/port","title":"var port: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/pathname","title":"var pathname: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/search","title":"var search: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/hash","title":"var hash: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/href","title":"var href: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/origin","title":"var origin: String","type":"property"},{"title":"Returning to WebURL","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/swiftmodel","title":"var swiftModel: WebURL","type":"property"},{"title":"View Type","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/init(_:base:)","title":"init?(String, base: String?)","type":"init"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/==(_:_:)","title":"static func == (WebURL.JSModel, WebURL.JSModel) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.struct","title":"WebURL.JSModel","type":"struct"}],"path":"\/documentation\/weburl\/weburl\/jsmodel-swift.property","title":"var jsModel: WebURL.JSModel","type":"property"},{"title":"Binary File Paths","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/frombinaryfilepath(_:format:)","title":"static func fromBinaryFilePath<Bytes>(Bytes, format: FilePathFormat) throws -> WebURL","type":"method"},{"path":"\/documentation\/weburl\/weburl\/binaryfilepath(from:format:nullterminated:)","title":"static func binaryFilePath(from: WebURL, format: FilePathFormat, nullTerminated: Bool) throws -> [UInt8]","type":"method"},{"children":[{"title":"Supported Formats","type":"groupMarker"},{"path":"\/documentation\/weburl\/filepathformat\/posix","title":"static var posix: FilePathFormat","type":"property"},{"path":"\/documentation\/weburl\/filepathformat\/windows","title":"static var windows: FilePathFormat","type":"property"},{"path":"\/documentation\/weburl\/filepathformat\/native","title":"static var native: FilePathFormat","type":"property"},{"title":"Errors","type":"groupMarker"},{"children":[{"title":"All URLs and Paths","type":"groupMarker"},{"path":"\/documentation\/weburl\/filepathfromurlerror\/notafileurl","title":"static var notAFileURL: FilePathFromURLError","type":"property"},{"path":"\/documentation\/weburl\/filepathfromurlerror\/encodedpathseparator","title":"static var encodedPathSeparator: FilePathFromURLError","type":"property"},{"path":"\/documentation\/weburl\/filepathfromurlerror\/encodednullbytes","title":"static var encodedNullBytes: FilePathFromURLError","type":"property"},{"title":"POSIX Paths","type":"groupMarker"},{"path":"\/documentation\/weburl\/filepathfromurlerror\/unsupportednonlocalfile","title":"static var unsupportedNonLocalFile: FilePathFromURLError","type":"property"},{"title":"Windows Paths","type":"groupMarker"},{"path":"\/documentation\/weburl\/filepathfromurlerror\/unsupportedhostname","title":"static var unsupportedHostname: FilePathFromURLError","type":"property"},{"path":"\/documentation\/weburl\/filepathfromurlerror\/windowspathisnotfullyqualified","title":"static var windowsPathIsNotFullyQualified: FilePathFromURLError","type":"property"},{"path":"\/documentation\/weburl\/filepathfromurlerror\/transcodingfailure","title":"static var transcodingFailure: FilePathFromURLError","type":"property"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/filepathfromurlerror\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/filepathfromurlerror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/filepathfromurlerror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/filepathfromurlerror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/weburl\/filepathfromurlerror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/filepathfromurlerror","title":"FilePathFromURLError","type":"struct"},{"children":[{"title":"All Paths","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlfromfilepatherror\/emptyinput","title":"static var emptyInput: URLFromFilePathError","type":"property"},{"path":"\/documentation\/weburl\/urlfromfilepatherror\/nullbytes","title":"static var nullBytes: URLFromFilePathError","type":"property"},{"path":"\/documentation\/weburl\/urlfromfilepatherror\/relativepath","title":"static var relativePath: URLFromFilePathError","type":"property"},{"path":"\/documentation\/weburl\/urlfromfilepatherror\/upwardstraversal","title":"static var upwardsTraversal: URLFromFilePathError","type":"property"},{"title":"Windows Paths","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlfromfilepatherror\/invalidhostname","title":"static var invalidHostname: URLFromFilePathError","type":"property"},{"path":"\/documentation\/weburl\/urlfromfilepatherror\/invalidpath","title":"static var invalidPath: URLFromFilePathError","type":"property"},{"path":"\/documentation\/weburl\/urlfromfilepatherror\/unsupportedwin32namespacedpath","title":"static var unsupportedWin32NamespacedPath: URLFromFilePathError","type":"property"},{"path":"\/documentation\/weburl\/urlfromfilepatherror\/transcodingfailure","title":"static var transcodingFailure: URLFromFilePathError","type":"property"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlfromfilepatherror\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlfromfilepatherror\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/urlfromfilepatherror\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlfromfilepatherror\/localizeddescription","title":"var localizedDescription: String","type":"property"}],"path":"\/documentation\/weburl\/urlfromfilepatherror\/error-implementations","title":"Error Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/urlfromfilepatherror","title":"URLFromFilePathError","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/filepathformat\/description","title":"var description: String","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/filepathformat\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/filepathformat\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/filepathformat","title":"FilePathFormat","type":"struct"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/'...(_:)-61vd0","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/weburl\/weburl\/'...(_:)-7mqto","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/weburl\/weburl\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/weburl\/weburl\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/weburl\/weburl\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/weburl\/weburl\/_(_:_:)-3s5ym","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/weburl\/_(_:_:)-74jbv","title":"static func < (WebURL, WebURL) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/weburl\/_=(_:_:)-637ry","title":"static func >= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/weburl\/_=(_:_:)-6742p","title":"static func <= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/weburl\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/weburl\/weburl\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/weburl\/weburl\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/weburl\/weburl\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/weburl\/==(_:_:)","title":"static func == (WebURL, WebURL) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/weburl\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/weburl\/weburl\/hashable-implementations","title":"Hashable Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/weburl","title":"WebURL","type":"struct"},{"children":[{"title":"Percent-Encoding Sets","type":"groupMarker"},{"children":[{"title":"Encode Sets from the URL Standard","type":"groupMarker"},{"path":"\/documentation\/weburl\/percentencodeset\/urlcomponentset","title":"static var urlComponentSet: URLEncodeSet.Component","type":"property"},{"path":"\/documentation\/weburl\/percentencodeset\/formencoding","title":"static var formEncoding: URLEncodeSet.FormEncoding","type":"property"},{"path":"\/documentation\/weburl\/percentencodeset\/c0controlset","title":"static var c0ControlSet: URLEncodeSet.C0Control","type":"property"},{"path":"\/documentation\/weburl\/percentencodeset\/userinfoset","title":"static var userInfoSet: URLEncodeSet.UserInfo","type":"property"},{"path":"\/documentation\/weburl\/percentencodeset\/pathset","title":"static var pathSet: URLEncodeSet.Path","type":"property"},{"path":"\/documentation\/weburl\/percentencodeset\/queryset","title":"static var querySet: URLEncodeSet.Query","type":"property"},{"path":"\/documentation\/weburl\/percentencodeset\/specialqueryset","title":"static var specialQuerySet: URLEncodeSet.SpecialQuery","type":"property"},{"path":"\/documentation\/weburl\/percentencodeset\/fragmentset","title":"static var fragmentSet: URLEncodeSet.Fragment","type":"property"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/c0control\/shouldpercentencode(ascii:)","title":"func shouldPercentEncode(ascii: UInt8) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/c0control\/substitutions","title":"var substitutions: NoSubstitutions","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/c0control\/c0controlset","title":"static var c0ControlSet: URLEncodeSet.C0Control","type":"property"}],"path":"\/documentation\/weburl\/urlencodeset\/c0control\/percentencodeset-implementations","title":"PercentEncodeSet Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/urlencodeset\/c0control","title":"URLEncodeSet.C0Control","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/component\/shouldpercentencode(ascii:)","title":"func shouldPercentEncode(ascii: UInt8) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/component\/substitutions","title":"var substitutions: NoSubstitutions","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/component\/urlcomponentset","title":"static var urlComponentSet: URLEncodeSet.Component","type":"property"}],"path":"\/documentation\/weburl\/urlencodeset\/component\/percentencodeset-implementations","title":"PercentEncodeSet Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/urlencodeset\/component","title":"URLEncodeSet.Component","type":"struct"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/formencoding\/substitutions-swift.struct\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/formencoding\/substitutions-swift.struct\/substitute(ascii:)","title":"func substitute(ascii: UInt8) -> UInt8?","type":"method"},{"path":"\/documentation\/weburl\/urlencodeset\/formencoding\/substitutions-swift.struct\/unsubstitute(ascii:)","title":"func unsubstitute(ascii: UInt8) -> UInt8?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/formencoding\/substitutions-swift.struct\/formencoding","title":"static var formEncoding: URLEncodeSet.FormEncoding.Substitutions","type":"property"}],"path":"\/documentation\/weburl\/urlencodeset\/formencoding\/substitutions-swift.struct\/substitutionmap-implementations","title":"SubstitutionMap Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/urlencodeset\/formencoding\/substitutions-swift.struct","title":"URLEncodeSet.FormEncoding.Substitutions","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/formencoding\/substitutions-swift.property","title":"var substitutions: URLEncodeSet.FormEncoding.Substitutions","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/formencoding\/shouldpercentencode(ascii:)","title":"func shouldPercentEncode(ascii: UInt8) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/formencoding\/formencoding","title":"static var formEncoding: URLEncodeSet.FormEncoding","type":"property"}],"path":"\/documentation\/weburl\/urlencodeset\/formencoding\/percentencodeset-implementations","title":"PercentEncodeSet Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/urlencodeset\/formencoding","title":"URLEncodeSet.FormEncoding","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/fragment\/shouldpercentencode(ascii:)","title":"func shouldPercentEncode(ascii: UInt8) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/fragment\/substitutions","title":"var substitutions: NoSubstitutions","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/fragment\/fragmentset","title":"static var fragmentSet: URLEncodeSet.Fragment","type":"property"}],"path":"\/documentation\/weburl\/urlencodeset\/fragment\/percentencodeset-implementations","title":"PercentEncodeSet Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/urlencodeset\/fragment","title":"URLEncodeSet.Fragment","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/path\/shouldpercentencode(ascii:)","title":"func shouldPercentEncode(ascii: UInt8) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/path\/substitutions","title":"var substitutions: NoSubstitutions","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/path\/pathset","title":"static var pathSet: URLEncodeSet.Path","type":"property"}],"path":"\/documentation\/weburl\/urlencodeset\/path\/percentencodeset-implementations","title":"PercentEncodeSet Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/urlencodeset\/path","title":"URLEncodeSet.Path","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/query\/shouldpercentencode(ascii:)","title":"func shouldPercentEncode(ascii: UInt8) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/query\/substitutions","title":"var substitutions: NoSubstitutions","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/query\/queryset","title":"static var querySet: URLEncodeSet.Query","type":"property"}],"path":"\/documentation\/weburl\/urlencodeset\/query\/percentencodeset-implementations","title":"PercentEncodeSet Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/urlencodeset\/query","title":"URLEncodeSet.Query","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/specialquery\/shouldpercentencode(ascii:)","title":"func shouldPercentEncode(ascii: UInt8) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/specialquery\/substitutions","title":"var substitutions: NoSubstitutions","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/specialquery\/specialqueryset","title":"static var specialQuerySet: URLEncodeSet.SpecialQuery","type":"property"}],"path":"\/documentation\/weburl\/urlencodeset\/specialquery\/percentencodeset-implementations","title":"PercentEncodeSet Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/urlencodeset\/specialquery","title":"URLEncodeSet.SpecialQuery","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/userinfo\/shouldpercentencode(ascii:)","title":"func shouldPercentEncode(ascii: UInt8) -> Bool","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/userinfo\/substitutions","title":"var substitutions: NoSubstitutions","type":"property"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/urlencodeset\/userinfo\/userinfoset","title":"static var userInfoSet: URLEncodeSet.UserInfo","type":"property"}],"path":"\/documentation\/weburl\/urlencodeset\/userinfo\/percentencodeset-implementations","title":"PercentEncodeSet Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/urlencodeset\/userinfo","title":"URLEncodeSet.UserInfo","type":"struct"}],"path":"\/documentation\/weburl\/urlencodeset","title":"URLEncodeSet","type":"enum"},{"title":"Requirements for Custom Encode Sets","type":"groupMarker"},{"path":"\/documentation\/weburl\/percentencodeset\/shouldpercentencode(ascii:)","title":"func shouldPercentEncode(ascii: UInt8) -> Bool","type":"method"},{"title":"Substitution Maps","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/weburl\/percentencodeset\/substitutions-swift.property-9df3g","title":"var substitutions: NoSubstitutions","type":"property"}],"title":"PercentEncodeSet Implementations","type":"groupMarker"}],"path":"\/documentation\/weburl\/percentencodeset\/substitutions-swift.property-fk3r","title":"var substitutions: Self.Substitutions","type":"property"},{"path":"\/documentation\/weburl\/percentencodeset\/substitutions-swift.associatedtype","title":"Substitutions","type":"associatedtype"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/weburl\/nosubstitutions\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/nosubstitutions\/substitute(ascii:)","title":"func substitute(ascii: UInt8) -> UInt8?","type":"method"},{"path":"\/documentation\/weburl\/nosubstitutions\/unsubstitute(ascii:)","title":"func unsubstitute(ascii: UInt8) -> UInt8?","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/nosubstitutions\/none","title":"static var none: NoSubstitutions","type":"property"}],"path":"\/documentation\/weburl\/nosubstitutions\/substitutionmap-implementations","title":"SubstitutionMap Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/nosubstitutions","title":"NoSubstitutions","type":"struct"},{"children":[{"title":"Substitution Maps Used By URLs","type":"groupMarker"},{"path":"\/documentation\/weburl\/substitutionmap\/none","title":"static var none: NoSubstitutions","type":"property"},{"path":"\/documentation\/weburl\/substitutionmap\/formencoding","title":"static var formEncoding: URLEncodeSet.FormEncoding.Substitutions","type":"property"},{"title":"Requirements for Creating a Custom Substitution Map","type":"groupMarker"},{"path":"\/documentation\/weburl\/substitutionmap\/substitute(ascii:)","title":"func substitute(ascii: UInt8) -> UInt8?","type":"method"},{"path":"\/documentation\/weburl\/substitutionmap\/unsubstitute(ascii:)","title":"func unsubstitute(ascii: UInt8) -> UInt8?","type":"method"}],"path":"\/documentation\/weburl\/substitutionmap","title":"SubstitutionMap","type":"protocol"}],"path":"\/documentation\/weburl\/percentencodeset","title":"PercentEncodeSet","type":"protocol"},{"path":"\/documentation\/weburl\/percentencodeset\/urlcomponentset","title":"static var urlComponentSet: URLEncodeSet.Component","type":"property"},{"path":"\/documentation\/weburl\/percentencodeset\/formencoding","title":"static var formEncoding: URLEncodeSet.FormEncoding","type":"property"},{"title":"Encoding and Decoding Lazily","type":"groupMarker"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/==(_:_:)","title":"static func == (LazilyPercentEncoded<Source, EncodeSet>.Index, LazilyPercentEncoded<Source, EncodeSet>.Index) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/_(_:_:)-404ce","title":"static func < (LazilyPercentEncoded<Source, EncodeSet>.Index, LazilyPercentEncoded<Source, EncodeSet>.Index) -> Bool","type":"op"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/'...(_:)-58jt2","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/'...(_:)-99sep","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/_(_:_:)-795hk","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/_=(_:_:)-3v5ow","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/_=(_:_:)-52lgk","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/lazilypercentencoded\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/lazilypercentencoded\/index","title":"LazilyPercentEncoded.Index","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/endindex","title":"var endIndex: LazilyPercentEncoded<Source, EncodeSet>.Index","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/isempty-5rvo8","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/startindex","title":"let startIndex: LazilyPercentEncoded<Source, EncodeSet>.Index","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/underestimatedcount-46fi","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/formindex(after:)","title":"func formIndex(after: inout LazilyPercentEncoded<Source, EncodeSet>.Index)","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index(after:)","title":"func index(after: LazilyPercentEncoded<Source, EncodeSet>.Index) -> LazilyPercentEncoded<Source, EncodeSet>.Index","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/subscript(_:)-t00y","title":"subscript(LazilyPercentEncoded<Source, EncodeSet>.Index) -> UInt8","type":"subscript"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/formindex(before:)-3k7rr","title":"func formIndex(before: inout LazilyPercentEncoded<Source, EncodeSet>.Index)","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/formindex(before:)-9ka67","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index(before:)","title":"func index(before: LazilyPercentEncoded<Source, EncodeSet>.Index) -> LazilyPercentEncoded<Source, EncodeSet>.Index","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"}],"path":"\/documentation\/weburl\/lazilypercentencoded\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/isempty-727yf","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/underestimatedcount-3xn62","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/map(_:)-64lf2","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/percentencodedstring(using:)-401h0","title":"func percentEncodedString<EncodeSet>(using: EncodeSet) -> String","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/percentencodedstring(using:)-nyk4","title":"func percentEncodedString<EncodeSet>(using: EncodeSet._Member) -> String","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/subscript(_:)-3p3ax","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/subscript(_:)-6ctvc","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/subscript(_:)-9bc6z","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"}],"path":"\/documentation\/weburl\/lazilypercentencoded\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/lazy-1bspd","title":"var lazy: LazyCollection<Self.Elements>","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/lazy-47y93","title":"var lazy: Self.Elements","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/percentdecoded()","title":"func percentDecoded() -> LazilyPercentDecoded<Self.Elements>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/percentdecoded(substitutions:)-3m07t","title":"func percentDecoded<Substitutions>(substitutions: Substitutions._Member) -> LazilyPercentDecodedWithSubstitutions<Self.Elements, Substitutions>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/percentdecoded(substitutions:)-57yjj","title":"func percentDecoded<Substitutions>(substitutions: Substitutions) -> LazilyPercentDecodedWithSubstitutions<Self.Elements, Substitutions>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/percentencoded(using:)-5wwrr","title":"func percentEncoded<EncodeSet>(using: EncodeSet) -> LazilyPercentEncoded<Self.Elements, EncodeSet>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/percentencoded(using:)-9w113","title":"func percentEncoded<EncodeSet>(using: EncodeSet._Member) -> LazilyPercentEncoded<Self.Elements, EncodeSet>","type":"method"}],"path":"\/documentation\/weburl\/lazilypercentencoded\/lazycollectionprotocol-implementations","title":"LazyCollectionProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/elements","title":"var elements: Self","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/lazy-16f0d","title":"var lazy: LazySequence<Self.Elements>","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/lazy-36qp8","title":"var lazy: Self.Elements","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/compactmap(_:)-v06r","title":"func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/drop(while:)","title":"func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/filter(_:)","title":"func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/flatmap(_:)-5qxwa","title":"func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/flatmap(_:)-5zken","title":"func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/map(_:)-4rwxb","title":"func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/prefix(while:)","title":"func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>","type":"method"}],"path":"\/documentation\/weburl\/lazilypercentencoded\/lazysequenceprotocol-implementations","title":"LazySequenceProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/lazy-52bx4","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/underestimatedcount-6k1u3","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/compactmap(_:)-48c7","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/flatmap(_:)-8l0a7","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/flatmap(_:)-xkkd","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/map(_:)-90aku","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentencoded\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/weburl\/lazilypercentencoded\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/lazilypercentencoded","title":"LazilyPercentEncoded","type":"struct"},{"path":"\/documentation\/weburl\/lazilypercentdecoded","title":"LazilyPercentDecoded","type":"typealias"},{"children":[{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/==(_:_:)","title":"static func == (LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index, LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/_(_:_:)-5fa0s","title":"static func > (LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index, LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/_(_:_:)-941g","title":"static func < (LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index, LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index) -> Bool","type":"op"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/'...(_:)-3nmww","title":"static func ... (Self) -> PartialRangeThrough<Self>","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/'...(_:)-71j8z","title":"static func ... (Self) -> PartialRangeFrom<Self>","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/'...(_:_:)","title":"static func ... (Self, Self) -> ClosedRange<Self>","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/'.._(_:)","title":"static func ..< (Self) -> PartialRangeUpTo<Self>","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/'.._(_:_:)","title":"static func ..< (Self, Self) -> Range<Self>","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/_(_:_:)-89pqu","title":"static func > (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/_=(_:_:)-5hzdq","title":"static func <= (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/_=(_:_:)-9l7i5","title":"static func >= (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/comparable-implementations","title":"Comparable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index","title":"LazilyPercentDecodedWithSubstitutions.Index","type":"struct"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/endindex","title":"var endIndex: LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/isempty-1kmjr","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/startindex","title":"let startIndex: LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/formindex(after:)","title":"func formIndex(after: inout LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index)","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index(after:)","title":"func index(after: LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index) -> LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/isbytedecodedorunsubstituted(at:)","title":"func isByteDecodedOrUnsubstituted(at: LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/sourceindices(at:)","title":"func sourceIndices(at: LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index) -> Range<Source.Index>","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/subscript(_:)-8ptg8","title":"subscript(LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index) -> LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Element","type":"subscript"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/element","title":"LazilyPercentDecodedWithSubstitutions.Element","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/last","title":"var last: Self.Element?","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/difference(from:)","title":"func difference<C>(from: C) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/difference(from:by:)","title":"func difference<C>(from: C, by: (C.Element, Self.Element) -> Bool) -> CollectionDifference<Self.Element>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/formindex(before:)-2za2w","title":"func formIndex(before: inout LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index)","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/formindex(before:)-8w9u","title":"func formIndex(before: inout Self.Index)","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index(before:)","title":"func index(before: LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index) -> LazilyPercentDecodedWithSubstitutions<Source, Substitutions>.Index","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/last(where:)","title":"func last(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/lastindex(of:)","title":"func lastIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/lastindex(where:)","title":"func lastIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"}],"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/bidirectionalcollection-implementations","title":"BidirectionalCollection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/count","title":"var count: Int","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/first","title":"var first: Self.Element?","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/indices","title":"var indices: DefaultIndices<Self>","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/isempty-3xlc4","title":"var isEmpty: Bool","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/underestimatedcount-yvx6","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/distance(from:to:)","title":"func distance(from: Self.Index, to: Self.Index) -> Int","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/dropfirst(_:)","title":"func dropFirst(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/droplast(_:)","title":"func dropLast(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/firstindex(of:)","title":"func firstIndex(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/firstindex(where:)","title":"func firstIndex(where: (Self.Element) throws -> Bool) rethrows -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/formindex(_:offsetby:)","title":"func formIndex(inout Self.Index, offsetBy: Int)","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/formindex(_:offsetby:limitedby:)","title":"func formIndex(inout Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index(_:offsetby:)","title":"func index(Self.Index, offsetBy: Int) -> Self.Index","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index(_:offsetby:limitedby:)","title":"func index(Self.Index, offsetBy: Int, limitedBy: Self.Index) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/index(of:)","title":"func index(of: Self.Element) -> Self.Index?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/makeiterator()","title":"func makeIterator() -> IndexingIterator<Self>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/map(_:)-81e08","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/percentencodedstring(using:)-7hm9r","title":"func percentEncodedString<EncodeSet>(using: EncodeSet._Member) -> String","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/percentencodedstring(using:)-7ssuo","title":"func percentEncodedString<EncodeSet>(using: EncodeSet) -> String","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/prefix(_:)","title":"func prefix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/prefix(through:)","title":"func prefix(through: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/prefix(upto:)","title":"func prefix(upTo: Self.Index) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/randomelement()","title":"func randomElement() -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/randomelement(using:)","title":"func randomElement<T>(using: inout T) -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/split(maxsplits:omittingemptysubsequences:whereseparator:)","title":"func split(maxSplits: Int, omittingEmptySubsequences: Bool, whereSeparator: (Self.Element) throws -> Bool) rethrows -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/split(separator:maxsplits:omittingemptysubsequences:)","title":"func split(separator: Self.Element, maxSplits: Int, omittingEmptySubsequences: Bool) -> [Self.SubSequence]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/suffix(_:)","title":"func suffix(Int) -> Self.SubSequence","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/suffix(from:)","title":"func suffix(from: Self.Index) -> Self.SubSequence","type":"method"},{"title":"Subscripts","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/subscript(_:)-1iiqg","title":"subscript(Range<Self.Index>) -> Slice<Self>","type":"subscript"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/subscript(_:)-9f4fu","title":"subscript<R>(R) -> Self.SubSequence","type":"subscript"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/subscript(_:)-9yfpj","title":"subscript((UnboundedRange_) -> ()) -> Self.SubSequence","type":"subscript"}],"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/collection-implementations","title":"Collection Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/lazy-1is6f","title":"var lazy: LazyCollection<Self.Elements>","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/lazy-8h1js","title":"var lazy: Self.Elements","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/percentdecoded()","title":"func percentDecoded() -> LazilyPercentDecoded<Self.Elements>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/percentdecoded(substitutions:)-1j21d","title":"func percentDecoded<Substitutions>(substitutions: Substitutions) -> LazilyPercentDecodedWithSubstitutions<Self.Elements, Substitutions>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/percentdecoded(substitutions:)-7r7zs","title":"func percentDecoded<Substitutions>(substitutions: Substitutions._Member) -> LazilyPercentDecodedWithSubstitutions<Self.Elements, Substitutions>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/percentencoded(using:)-21fqk","title":"func percentEncoded<EncodeSet>(using: EncodeSet._Member) -> LazilyPercentEncoded<Self.Elements, EncodeSet>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/percentencoded(using:)-3cnes","title":"func percentEncoded<EncodeSet>(using: EncodeSet) -> LazilyPercentEncoded<Self.Elements, EncodeSet>","type":"method"}],"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/lazycollectionprotocol-implementations","title":"LazyCollectionProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/elements","title":"var elements: Self","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/lazy-1toii","title":"var lazy: Self.Elements","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/lazy-6r3bc","title":"var lazy: LazySequence<Self.Elements>","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/compactmap(_:)-648oj","title":"func compactMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/drop(while:)","title":"func drop(while: (Self.Elements.Element) -> Bool) -> LazyDropWhileSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/filter(_:)","title":"func filter((Self.Elements.Element) -> Bool) -> LazyFilterSequence<Self.Elements>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/flatmap(_:)-5wpsg","title":"func flatMap<SegmentOfResult>((Self.Elements.Element) -> SegmentOfResult) -> LazySequence<FlattenSequence<LazyMapSequence<Self.Elements, SegmentOfResult>>>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/flatmap(_:)-9w5hi","title":"func flatMap<ElementOfResult>((Self.Elements.Element) -> ElementOfResult?) -> LazyMapSequence<LazyFilterSequence<LazyMapSequence<Self.Elements, ElementOfResult?>>, ElementOfResult>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/map(_:)-4wlh6","title":"func map<U>((Self.Element) -> U) -> LazyMapSequence<Self.Elements, U>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/prefix(while:)","title":"func prefix(while: (Self.Elements.Element) -> Bool) -> LazyPrefixWhileSequence<Self.Elements>","type":"method"}],"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/lazysequenceprotocol-implementations","title":"LazySequenceProtocol Implementations","type":"symbol"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/lazy-h0j","title":"var lazy: LazySequence<Self>","type":"property"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/underestimatedcount-2b1ha","title":"var underestimatedCount: Int","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/allsatisfy(_:)","title":"func allSatisfy((Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/compactmap(_:)-1kine","title":"func compactMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/contains(_:)","title":"func contains(Self.Element) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/contains(where:)","title":"func contains(where: (Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/elementsequal(_:)","title":"func elementsEqual<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/elementsequal(_:by:)","title":"func elementsEqual<OtherSequence>(OtherSequence, by: (Self.Element, OtherSequence.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/enumerated()","title":"func enumerated() -> EnumeratedSequence<Self>","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/first(where:)","title":"func first(where: (Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/flatmap(_:)-21k83","title":"func flatMap<SegmentOfResult>((Self.Element) throws -> SegmentOfResult) rethrows -> [SegmentOfResult.Element]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/flatmap(_:)-8epjn","title":"func flatMap<ElementOfResult>((Self.Element) throws -> ElementOfResult?) rethrows -> [ElementOfResult]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/foreach(_:)","title":"func forEach((Self.Element) throws -> Void) rethrows","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/lexicographicallyprecedes(_:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/lexicographicallyprecedes(_:by:)","title":"func lexicographicallyPrecedes<OtherSequence>(OtherSequence, by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/map(_:)-3kpj5","title":"func map<T>((Self.Element) throws -> T) rethrows -> [T]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/max()","title":"func max() -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/max(by:)","title":"func max(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/min()","title":"func min() -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/min(by:)","title":"func min(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> Self.Element?","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/reduce(_:_:)","title":"func reduce<Result>(Result, (Result, Self.Element) throws -> Result) rethrows -> Result","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/reduce(into:_:)","title":"func reduce<Result>(into: Result, (inout Result, Self.Element) throws -> ()) rethrows -> Result","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/reversed()","title":"func reversed() -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/shuffled()","title":"func shuffled() -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/shuffled(using:)","title":"func shuffled<T>(using: inout T) -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/sorted()","title":"func sorted() -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/sorted(by:)","title":"func sorted(by: (Self.Element, Self.Element) throws -> Bool) rethrows -> [Self.Element]","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/starts(with:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix) -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/starts(with:by:)","title":"func starts<PossiblePrefix>(with: PossiblePrefix, by: (Self.Element, PossiblePrefix.Element) throws -> Bool) rethrows -> Bool","type":"method"},{"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/withcontiguousstorageifavailable(_:)","title":"func withContiguousStorageIfAvailable<R>((UnsafeBufferPointer<Self.Element>) throws -> R) rethrows -> R?","type":"method"}],"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions\/sequence-implementations","title":"Sequence Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/lazilypercentdecodedwithsubstitutions","title":"LazilyPercentDecodedWithSubstitutions","type":"struct"}],"path":"\/documentation\/weburl\/percentencoding","title":"Percent-Encoding and Decoding","type":"symbol"},{"title":"Foundation Interoperability","type":"groupMarker"},{"path":"\/documentation\/weburl\/foundationinterop","title":"Using WebURL with Foundation","type":"article"},{"title":"Network Hosts","type":"groupMarker"},{"children":[{"title":"Parsing a Domain","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/domain\/init(_:)","title":"init?<StringType>(StringType)","type":"init"},{"path":"\/documentation\/weburl\/weburl\/domain\/init(utf8:)","title":"init?<UTF8Bytes>(utf8: UTF8Bytes)","type":"init"},{"title":"Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/domain\/serialized","title":"var serialized: String","type":"property"},{"path":"\/documentation\/weburl\/weburl\/domain\/isidn","title":"var isIDN: Bool","type":"property"},{"title":"Rendering a Domain","type":"groupMarker"},{"children":[{"title":"Compatibility with older versions of Swift","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/domain\/render(_:)-6xt1s","title":"func render<Renderer>(Renderer._Member) -> Renderer.Output","type":"method"}],"path":"\/documentation\/weburl\/weburl\/domain\/render(_:)-lssu","title":"func render<Renderer>(Renderer) -> Renderer.Output","type":"method"},{"children":[{"title":"Full-Domain Processing (Optional)","type":"groupMarker"},{"children":[{"children":[{"path":"\/documentation\/weburl\/domainrenderer\/processdomain(_:)-5t2n8","title":"func processDomain(WebURL.Domain)","type":"method"}],"title":"DomainRenderer Implementations","type":"groupMarker"}],"path":"\/documentation\/weburl\/domainrenderer\/processdomain(_:)-6b0yy","title":"func processDomain(WebURL.Domain)","type":"method"},{"title":"Per-Label Processing","type":"groupMarker"},{"path":"\/documentation\/weburl\/domainrenderer\/processlabel(_:isend:)","title":"func processLabel(inout Self.Label, isEnd: Bool)","type":"method"},{"children":[{"title":"Essential Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/domainrendererlabel\/ascii","title":"var ascii: Substring","type":"property"},{"path":"\/documentation\/weburl\/domainrendererlabel\/unicode","title":"var unicode: Substring","type":"property"},{"path":"\/documentation\/weburl\/domainrendererlabel\/unicodescalars","title":"var unicodeScalars: [Unicode.Scalar]","type":"property"},{"path":"\/documentation\/weburl\/domainrendererlabel\/isidn","title":"var isIDN: Bool","type":"property"},{"title":"Other Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/domainrendererlabel\/asciiwithleadingdelimiter","title":"var asciiWithLeadingDelimiter: Substring","type":"property"}],"path":"\/documentation\/weburl\/domainrenderer\/label","title":"DomainRenderer.Label","type":"typealias"},{"children":[{"children":[{"path":"\/documentation\/weburl\/domainrenderer\/readytoreturn-2x1g","title":"var readyToReturn: Bool","type":"property"}],"title":"DomainRenderer Implementations","type":"groupMarker"}],"path":"\/documentation\/weburl\/domainrenderer\/readytoreturn-xve4","title":"var readyToReturn: Bool","type":"property"},{"title":"The Result","type":"groupMarker"},{"path":"\/documentation\/weburl\/domainrenderer\/output","title":"Output","type":"associatedtype"},{"path":"\/documentation\/weburl\/domainrenderer\/result","title":"var result: Self.Output","type":"property"},{"title":"Aliases","type":"groupMarker"},{"path":"\/documentation\/weburl\/domainrenderer","title":"DomainRenderer","type":"protocol"},{"path":"\/documentation\/weburl\/domainrendererlabel","title":"DomainRendererLabel","type":"struct"}],"path":"\/documentation\/weburl\/weburl\/domain\/renderer","title":"WebURL.Domain.Renderer","type":"typealias"},{"children":[{"title":"Type Definition","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/uncheckedunicodedomainrenderer\/readytoreturn-48d9u","title":"var readyToReturn: Bool","type":"property"},{"path":"\/documentation\/weburl\/uncheckedunicodedomainrenderer\/result","title":"var result: String","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/uncheckedunicodedomainrenderer\/processdomain(_:)-6iwzo","title":"func processDomain(WebURL.Domain)","type":"method"},{"path":"\/documentation\/weburl\/uncheckedunicodedomainrenderer\/processlabel(_:isend:)","title":"func processLabel(inout UncheckedUnicodeDomainRenderer.Label, isEnd: Bool)","type":"method"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/weburl\/uncheckedunicodedomainrenderer\/output","title":"UncheckedUnicodeDomainRenderer.Output","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/uncheckedunicodedomainrenderer\/readytoreturn-j4p3","title":"var readyToReturn: Bool","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/uncheckedunicodedomainrenderer\/processdomain(_:)-4ofcf","title":"func processDomain(WebURL.Domain)","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/uncheckedunicodedomainrenderer\/uncheckedunicodestring","title":"static var uncheckedUnicodeString: UncheckedUnicodeDomainRenderer","type":"property"}],"path":"\/documentation\/weburl\/uncheckedunicodedomainrenderer\/domainrenderer-implementations","title":"DomainRenderer Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/uncheckedunicodedomainrenderer","title":"UncheckedUnicodeDomainRenderer","type":"struct"}],"path":"\/documentation\/weburl\/domainrenderer\/uncheckedunicodestring","title":"static var uncheckedUnicodeString: UncheckedUnicodeDomainRenderer","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/domain\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/weburl\/weburl\/domain\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/domain\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/weburl\/weburl\/domain\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/domain\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/weburl\/weburl\/domain\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/domain\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/weburl\/domain\/==(_:_:)","title":"static func == (WebURL.Domain, WebURL.Domain) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/weburl\/domain\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/domain\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/weburl\/weburl\/domain\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/weburl\/weburl\/domain\/init(_:)","title":"init?<StringType>(StringType)","type":"init"}],"path":"\/documentation\/weburl\/weburl\/domain\/losslessstringconvertible-implementations","title":"LosslessStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/weburl\/domain","title":"WebURL.Domain","type":"struct"},{"children":[{"title":"Parsing an Address from a String","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv4address\/init(_:)","title":"init?<StringType>(StringType)","type":"init"},{"path":"\/documentation\/weburl\/ipv4address\/init(dotteddecimal:)","title":"init?<StringType>(dottedDecimal: StringType)","type":"init"},{"path":"\/documentation\/weburl\/ipv4address\/init(utf8:)","title":"init?<UTF8Bytes>(utf8: UTF8Bytes)","type":"init"},{"path":"\/documentation\/weburl\/ipv4address\/init(dotteddecimalutf8:)","title":"init?<UTF8Bytes>(dottedDecimalUTF8: UTF8Bytes)","type":"init"},{"title":"Obtaining an Address’ String Representation","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv4address\/serialized","title":"var serialized: String","type":"property"},{"title":"Addresses as Bytes","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv4address\/init(octets:)","title":"init(octets: IPv4Address.Octets)","type":"init"},{"path":"\/documentation\/weburl\/ipv4address\/octets-swift.property","title":"var octets: IPv4Address.Octets","type":"property"},{"title":"Addresses as a 32-bit Integer","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv4address\/init(value:_:)","title":"init(value: UInt32, OctetArrangement)","type":"init"},{"path":"\/documentation\/weburl\/ipv4address\/subscript(value:)","title":"subscript(value _: OctetArrangement) -> UInt32","type":"subscript"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/weburl\/octetarrangement\/binary","title":"case binary","type":"case"},{"path":"\/documentation\/weburl\/octetarrangement\/numeric","title":"case numeric","type":"case"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/octetarrangement\/hostorder","title":"static var hostOrder: OctetArrangement","type":"property"},{"path":"\/documentation\/weburl\/octetarrangement\/networkorder","title":"static var networkOrder: OctetArrangement","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/octetarrangement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/octetarrangement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/octetarrangement","title":"OctetArrangement","type":"enum"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv4address\/octets-swift.typealias","title":"IPv4Address.Octets","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv4address\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/weburl\/ipv4address\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv4address\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/weburl\/ipv4address\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv4address\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/weburl\/ipv4address\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv4address\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/ipv4address\/==(_:_:)","title":"static func == (IPv4Address, IPv4Address) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/ipv4address\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv4address\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/weburl\/ipv4address\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv4address\/init(_:)","title":"init?<StringType>(StringType)","type":"init"}],"path":"\/documentation\/weburl\/ipv4address\/losslessstringconvertible-implementations","title":"LosslessStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/ipv4address","title":"IPv4Address","type":"struct"},{"children":[{"title":"Parsing an Address from a String","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv6address\/init(_:)","title":"init?<StringType>(StringType)","type":"init"},{"path":"\/documentation\/weburl\/ipv6address\/init(utf8:)","title":"init?<UTF8Bytes>(utf8: UTF8Bytes)","type":"init"},{"title":"Obtaining an Address’ String Representation","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv6address\/serialized","title":"var serialized: String","type":"property"},{"title":"Addresses as Bytes","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv6address\/init(octets:)","title":"init(octets: IPv6Address.Octets)","type":"init"},{"path":"\/documentation\/weburl\/ipv6address\/octets-swift.property","title":"var octets: IPv6Address.Octets","type":"property"},{"title":"Addresses as 16-bit Integer Pieces","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv6address\/init(pieces:_:)","title":"init(pieces: IPv6Address.Pieces, OctetArrangement)","type":"init"},{"path":"\/documentation\/weburl\/ipv6address\/subscript(pieces:)","title":"subscript(pieces _: OctetArrangement) -> IPv6Address.Pieces","type":"subscript"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/weburl\/octetarrangement\/binary","title":"case binary","type":"case"},{"path":"\/documentation\/weburl\/octetarrangement\/numeric","title":"case numeric","type":"case"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/octetarrangement\/hostorder","title":"static var hostOrder: OctetArrangement","type":"property"},{"path":"\/documentation\/weburl\/octetarrangement\/networkorder","title":"static var networkOrder: OctetArrangement","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/octetarrangement\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/octetarrangement\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/octetarrangement","title":"OctetArrangement","type":"enum"},{"title":"Type Aliases","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv6address\/octets-swift.typealias","title":"IPv6Address.Octets","type":"typealias"},{"path":"\/documentation\/weburl\/ipv6address\/pieces","title":"IPv6Address.Pieces","type":"typealias"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv6address\/description","title":"var description: String","type":"property"}],"path":"\/documentation\/weburl\/ipv6address\/customstringconvertible-implementations","title":"CustomStringConvertible Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv6address\/init(from:)","title":"init(from: Decoder) throws","type":"init"}],"path":"\/documentation\/weburl\/ipv6address\/decodable-implementations","title":"Decodable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv6address\/encode(to:)","title":"func encode(to: Encoder) throws","type":"method"}],"path":"\/documentation\/weburl\/ipv6address\/encodable-implementations","title":"Encodable Implementations","type":"symbol"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv6address\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"},{"path":"\/documentation\/weburl\/ipv6address\/==(_:_:)","title":"static func == (IPv6Address, IPv6Address) -> Bool","type":"op"}],"path":"\/documentation\/weburl\/ipv6address\/equatable-implementations","title":"Equatable Implementations","type":"symbol"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv6address\/hash(into:)","title":"func hash(into: inout Hasher)","type":"method"}],"path":"\/documentation\/weburl\/ipv6address\/hashable-implementations","title":"Hashable Implementations","type":"symbol"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/weburl\/ipv6address\/init(_:)","title":"init?<StringType>(StringType)","type":"init"}],"path":"\/documentation\/weburl\/ipv6address\/losslessstringconvertible-implementations","title":"LosslessStringConvertible Implementations","type":"symbol"}],"path":"\/documentation\/weburl\/ipv6address","title":"IPv6Address","type":"struct"},{"title":"Deprecated APIs","type":"groupMarker"},{"path":"\/documentation\/weburl\/deprecated","title":"Deprecated APIs","type":"article"}],"path":"\/documentation\/weburl","title":"WebURL","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":0}}