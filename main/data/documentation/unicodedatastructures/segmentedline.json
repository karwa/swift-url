{"metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","kind":"identifier"}],"roleHeading":"Structure","navigatorTitle":[{"text":"SegmentedLine","kind":"identifier"}],"symbolKind":"struct","role":"symbol","modules":[{"name":"UnicodeDataStructures"}],"externalID":"s:21UnicodeDataStructures13SegmentedLineV","title":"SegmentedLine"},"kind":"symbol","topicSections":[{"title":"Structures","identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Segments-swift.struct"]},{"title":"Initializers","identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/init(bounds:value:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/bounds","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/segments-swift.property"]},{"title":"Instance Methods","identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments(while:)","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/modify(_:_:)","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/set(_:to:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/CustomStringConvertible-Implementations","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Equatable-Implementations"]}],"variants":[{"paths":["\/documentation\/unicodedatastructures\/segmentedline"],"traits":[{"interfaceLanguage":"swift"}]}],"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/com.karwa.WebURL\/s23CustomStringConvertibleP","doc:\/\/com.karwa.WebURL\/SQ"],"kind":"relationships"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine"},"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures"]]},"abstract":[{"type":"text","text":"A "},{"code":"SegmentedLine","type":"codeVoice"},{"type":"text","text":" is a one-dimensional space, where every location is assigned a value."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Comparable","kind":"typeIdentifier","preciseIdentifier":"s:SL"}]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"type":"codeVoice","code":"SegmentedLine"},{"text":" is effective when entire regions are assigned the same value.","type":"text"},{"text":" ","type":"text"},{"text":"For example, we can build a simple number line to tag ranges of integers; in this case,","type":"text"},{"text":" ","type":"text"},{"text":"we’re tagging each range with an optional string.","type":"text"}],"type":"paragraph"},{"code":["var line = SegmentedLine<Int, String?>(bounds: 0..<100, value: nil)","","\/\/ After setting values <5 to \"small\" and values >10 to \"large\",","\/\/ the gap is left with its previous value, \"medium\".","","line.set(0..<20,  to: \"medium\")","line.set(0..<5,   to: \"small\")","line.set(10..<60, to: \"large\")","print(line)","\/\/ | [0..<5]: \"small\" | [5..<10]: \"medium\" | [10..<60]: \"large\" | [60..<100]: nil |"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The locations on a "},{"code":"SegmentedLine","type":"codeVoice"},{"type":"text","text":" do not have to be integers - they can be any "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":" type,"},{"type":"text","text":" "},{"type":"text","text":"including dates, strings, Unicode scalars (for building character sets), or "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" indexes."}],"type":"paragraph"},{"inlineContent":[{"text":"In the latter case, we can model a Collection’s elements as a line from its ","type":"text"},{"code":"startIndex","type":"codeVoice"},{"text":" to its ","type":"text"},{"code":"endIndex","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"allowing us to annotate regions of any Collection. In a way, it can be used as a generalized ","type":"text"},{"code":"AttributedString","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["let string = \"Bob is feeling great\"","","\/\/ Create a SegmentedLine for the collection's contents.","\/\/ Start by setting a font attribute over the entire string.","","var tags = SegmentedLine(","  bounds: string.startIndex..<string.endIndex,","  value: [Font.custom(\"Comic Sans\")] as [Any]",")","","\/\/ Set each word to a different color.","\/\/ Use 'modify' to append the attribute, but only for the region","\/\/ we're modifying.","","for word: Substring in string.split(separator: \" \") {","  tags.modify(word.startIndex..<word.endIndex) { attributes in","    attributes.append(Color.random())","  }","}","","\/\/ Check the result.","\/\/ - ✅ Every segment still contains the font attribute.","\/\/ - ✅ Each word also contains its individual color attribute.","","for (range, attributes) in tags.segments {","  print(#\"\"\\#(string[range])\"\"#, \"-\", attributes)","}","","\/\/ \"Bob\"     [Font.custom(\"Comic Sans\"), Color.orange]","\/\/ \" \"       [Font.custom(\"Comic Sans\")]","\/\/ \"is\"      [Font.custom(\"Comic Sans\"), Color.green]","\/\/ \" \"       [Font.custom(\"Comic Sans\")]","\/\/ \"feeling\" [Font.custom(\"Comic Sans\"), Color.pink]","\/\/ \" \"       [Font.custom(\"Comic Sans\")]","\/\/ \"great\"   [Font.custom(\"Comic Sans\"), Color.yellow]"],"type":"codeListing","syntax":"swift"}],"kind":"content"}],"sections":[],"references":{"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/CustomStringConvertible-Implementations":{"title":"CustomStringConvertible Implementations","kind":"article","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/CustomStringConvertible-Implementations","type":"topic","abstract":[],"url":"\/documentation\/unicodedatastructures\/segmentedline\/customstringconvertible-implementations","role":"collectionGroup"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/init(bounds:value:)":{"title":"init(bounds:value:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"bounds","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sn","kind":"typeIdentifier","text":"Range"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Creates a new space with the given bounds and value.","type":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/init(bounds:value:)","url":"\/documentation\/unicodedatastructures\/segmentedline\/init(bounds:value:)","type":"topic"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/modify(_:_:)":{"title":"modify(_:_:)","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/modify(_:_:)","type":"topic","abstract":[{"type":"text","text":"Modifies the values assigned to the given region."}],"url":"\/documentation\/unicodedatastructures\/segmentedline\/modify(_:_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"modify"},{"kind":"text","text":"("},{"kind":"typeIdentifier","preciseIdentifier":"s:Sn","text":"Range"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">, ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"text":") -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":")","kind":"text"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Comparable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/bounds":{"url":"\/documentation\/unicodedatastructures\/segmentedline\/bounds","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"bounds","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/bounds","type":"topic","abstract":[{"text":"The bounds of this space.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"bounds"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments(while:)":{"url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments(while:)","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"combineSegments(while:)","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments(while:)","type":"topic","abstract":[{"text":"Merges segments according to the given closure.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Segments","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Segments","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":")"}]},"doc://com.karwa.WebURL/s23CustomStringConvertibleP":{"title":"Swift.CustomStringConvertible","identifier":"doc:\/\/com.karwa.WebURL\/s23CustomStringConvertibleP","type":"unresolvable"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/set(_:to:)":{"url":"\/documentation\/unicodedatastructures\/segmentedline\/set(_:to:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"set(_:to:)","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/set(_:to:)","type":"topic","abstract":[{"text":"Assigns a single value to all locations in the given region.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"set"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Range","preciseIdentifier":"s:Sn"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures":{"url":"\/documentation\/unicodedatastructures","role":"collection","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","kind":"symbol","type":"topic","title":"UnicodeDataStructures","abstract":[]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/segments-swift.property":{"url":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.property","conformance":{"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"segments","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/segments-swift.property","type":"topic","abstract":[{"text":"The assigned regions of the space.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"segments","kind":"identifier"},{"text":": ","kind":"text"},{"text":"SegmentedLine","kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Segments","kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/mapValues(_:)":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapValues"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","text":"SegmentedLine"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"abstract":[{"text":"Returns a new ","type":"text"},{"code":"SegmentedLine","type":"codeVoice"},{"text":", created by transforming this line’s values using the given closure.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","title":"mapValues(_:)","url":"\/documentation\/unicodedatastructures\/segmentedline\/mapvalues(_:)"},"doc://com.karwa.WebURL/SQ":{"type":"unresolvable","identifier":"doc:\/\/com.karwa.WebURL\/SQ","title":"Swift.Equatable"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/Segments-swift.struct":{"url":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Segments","kind":"identifier"}],"role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic","title":"SegmentedLine.Segments","navigatorTitle":[{"text":"Segments","kind":"identifier"}],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Segments-swift.struct","kind":"symbol","abstract":[]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments()":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"()"}],"abstract":[{"text":"Merges segments of consecutive equal elements.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","title":"combineSegments()","url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine":{"url":"\/documentation\/unicodedatastructures\/segmentedline","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","kind":"identifier"}],"role":"symbol","type":"topic","title":"SegmentedLine","navigatorTitle":[{"text":"SegmentedLine","kind":"identifier"}],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","kind":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"SegmentedLine","type":"codeVoice"},{"text":" is a one-dimensional space, where every location is assigned a value.","type":"text"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/Equatable-Implementations":{"role":"collectionGroup","kind":"article","abstract":[],"type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Equatable-Implementations","title":"Equatable Implementations","url":"\/documentation\/unicodedatastructures\/segmentedline\/equatable-implementations"}}}