{"metadata":{"extendedModule":"UnicodeDataStructures","roleHeading":"Instance Method","role":"symbol","symbolKind":"method","modules":[{"name":"UnicodeDataStructures"}],"conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"externalID":"s:21UnicodeDataStructures13SegmentedLineVAASQR_rlE15combineSegmentsyyF","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"combineSegments","kind":"identifier"},{"text":"()","kind":"text"}],"title":"combineSegments()"},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"()"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"text":"This function can be particularly effective at simplifying lines with lots of segments, as by mapping","type":"text"},{"text":" ","type":"text"},{"text":"complex values to simplified ones (for example, mapping to an ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":" with fewer cases) using ","type":"text"},{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","type":"reference","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"we can discard information that isn’t needed. This can lead to adjacent segments containing the same value","type":"text"},{"text":" ","type":"text"},{"text":"more often - segments which can then be combined by this function.","type":"text"}]},{"type":"codeListing","code":["\/\/ ℹ️ Imagine we have a complex SegmentedLine with lots of small segments","\/\/    capturing granular details, and we'd like to simplify it.","","enum ComplexData {","  case categoryA, categoryB, categoryC \/\/ ...","}","let complexLine: SegmentedLine<Int, ComplexData> = \/\/ ...","print(complexLine)","\/\/ | [0..<2]: categoryA | [2..<4]: categoryB | [4..<12]: categoryC | ...","","\/\/ 1️⃣ Perhaps we can map these to a smaller number of states.","","enum SimplifiedData {","  case valid, invalid","}","var simplifiedLine = complexLine.mapValues { complex in","  SimplifiedData(validating: complex)","}","print(simplifiedLine)","\/\/ | [0..<2]: valid | [2..<4]: valid | [4..<12]: valid | ...","","\/\/ 2️⃣ Notice that we have lots of segments for boundaries which","\/\/    which are no longer important. 'combineSegments' can clean them up.","","simplifiedLine.combineSegments()","print(simplifiedLine)","\/\/ | [0..<2000]: valid | [2000..<2024]: invalid | [2024..<2056]: valid | ..."],"syntax":"swift"}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()"]}],"identifier":{"url":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","interfaceLanguage":"swift"},"sections":[],"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine"]]},"abstract":[{"text":"Merges segments of consecutive equal elements.","type":"text"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine":{"url":"\/documentation\/unicodedatastructures\/segmentedline","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","kind":"identifier"}],"role":"symbol","type":"topic","title":"SegmentedLine","navigatorTitle":[{"text":"SegmentedLine","kind":"identifier"}],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","kind":"symbol","abstract":[{"text":"A ","type":"text"},{"code":"SegmentedLine","type":"codeVoice"},{"text":" is a one-dimensional space, where every location is assigned a value.","type":"text"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments()":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"()"}],"abstract":[{"text":"Merges segments of consecutive equal elements.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","title":"combineSegments()","url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures":{"url":"\/documentation\/unicodedatastructures","role":"collection","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","kind":"symbol","type":"topic","title":"UnicodeDataStructures","abstract":[]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/mapValues(_:)":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Comparable"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"mapValues"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">(("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","text":"SegmentedLine"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"abstract":[{"text":"Returns a new ","type":"text"},{"code":"SegmentedLine","type":"codeVoice"},{"text":", created by transforming this line’s values using the given closure.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","title":"mapValues(_:)","url":"\/documentation\/unicodedatastructures\/segmentedline\/mapvalues(_:)"}}}