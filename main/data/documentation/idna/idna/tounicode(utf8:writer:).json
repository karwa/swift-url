{"identifier":{"url":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toUnicode(utf8:writer:)","interfaceLanguage":"swift"},"metadata":{"extendedModule":"IDNA","role":"symbol","roleHeading":"Type Method","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toUnicode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"utf8"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"writer"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:s25AnyRandomAccessCollectionV","text":"AnyRandomAccessCollection"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s7UnicodeO","text":"Unicode"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:s7UnicodeO6ScalarV","text":"Scalar"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"modules":[{"name":"IDNA"}],"externalID":"s:4IDNAAAO9toUnicode4utf86writerSbx_Sbs25AnyRandomAccessCollectionVys0C0O6ScalarVG_SbtXEtSlRzs5UInt8V7ElementRtzlFZ","symbolKind":"method","title":"toUnicode(utf8:writer:)"},"abstract":[{"type":"text","text":"Converts a domain to its canonical Unicode form."}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toUnicode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Source","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"utf8","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"source","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Source","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"writer","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:s25AnyRandomAccessCollectionV","text":"AnyRandomAccessCollection","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s7UnicodeO","text":"Unicode","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:s7UnicodeO6ScalarV","text":"Scalar","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Source","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:Sl","text":"Collection","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Source","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"preciseIdentifier":"s:s5UInt8V","text":"UInt8","kind":"typeIdentifier"}]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Return Value","level":2,"anchor":"return-value"},{"type":"paragraph","inlineContent":[{"text":"Whether or not the operation was successful.","type":"text"},{"text":" ","type":"text"},{"text":"If ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", the given domain is not valid, and any data previously yielded to ","type":"text"},{"code":"writer","type":"codeVoice"},{"text":" ","type":"text"},{"text":"should be discarded.","type":"text"}]}],"kind":"content"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A domain in either Unicode or ASCII form, expressed as a Collection of UTF-8 code-units."}]}],"name":"utf8"},{"content":[{"inlineContent":[{"text":"A closure which receives the domain labels emitted by this function.","type":"text"},{"text":" ","type":"text"},{"text":"The labels should be written in the order they are received, and if ","type":"text"},{"code":"needsTrailingDot","type":"codeVoice"},{"text":" is true,","type":"text"},{"text":" ","type":"text"},{"text":"the label should be followed by U+002E FULL STOP (‚Äù.‚Äù). Processing continues for as long as","type":"text"},{"text":" ","type":"text"},{"text":"the closure returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":"; meaning that it may perform validation, and may signal that processing","type":"text"},{"text":" ","type":"text"},{"text":"should stop by returning ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"writer"}],"kind":"parameters"},{"content":[{"level":2,"text":"Discussion","anchor":"discussion","type":"heading"},{"inlineContent":[{"type":"text","text":"The domain may be given in ASCII or Unicode form. This function will perform all required"},{"type":"text","text":" "},{"type":"text","text":"compatibility processing, including mapping and case-folding, normalization, Punycode decoding, etc."},{"type":"text","text":" "},{"type":"text","text":"Finally, each label and the entire domain are validated, producing a nice, canonicalized, Unicode-form domain."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function is idempotent, so if it is applied to a domain that is already in canonical Unicode form,"},{"type":"text","text":" "},{"type":"text","text":"it just produces the same value, unchanged."}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ ASCII domains.","toUnicode(\"example.com\")  \/\/ ‚úÖ \"example.com\"","","\/\/ Punycode.","toUnicode(\"xn--weswift-z98d\")        \/\/ ‚úÖ \"we‚ù§Ô∏èswift\"","toUnicode(\"api.xn--6qqa088eba.com\")  \/\/ ‚úÖ \"api.‰Ω†Â•Ω‰Ω†Â•Ω.com\"","","\/\/ Idempotent.","toUnicode(\"api.‰Ω†Â•Ω‰Ω†Â•Ω.com\")  \/\/ ‚úÖ \"api.‰Ω†Â•Ω‰Ω†Â•Ω.com\"","","\/\/ Normalizes Unicode domains.","toUnicode(\"www.caf\\u{00E9}.fr\")   \/\/ ‚úÖ \"www.caf√©.fr\" (\"caf\\u{00E9}\")","toUnicode(\"www.cafe\\u{0301}.fr\")  \/\/ ‚úÖ \"www.caf√©.fr\" (\"caf\\u{00E9}\")","toUnicode(\"www.xn--caf-dma.fr\")   \/\/ ‚úÖ \"www.caf√©.fr\" (\"caf\\u{00E9}\")"],"type":"codeListing"},{"inlineContent":[{"text":"Validation ensures that domains are NFC normalized and case-folded, and enforces some rules","type":"text"},{"text":" ","type":"text"},{"text":"with regards to use of joiners and bidirectional text.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Zero-width joiners and non-joiners are only allowed in certain contexts.","let notApple = \"a\\u{200C}pple.com\"     \/\/ ü•∏ Hey! There's a zero-width non-joiner hiding there!","print(notApple)           \"a‚Äåpple.com\"  \/\/ To a human, it looks like \"apple.com\"","print(notApple == \"apple.com\")  false  \/\/ A computer knows it ISN'T \"apple.com\"","toUnicode(\"a\\u{200C}pple.com\")  <nil>  \/\/ ‚ùé Not a valid IDN!","","\/\/ \"xn--cafe-yvc\" is how you would Punycode \"cafe\\u{0301}\" (the non-NFC \"caf√©\").","\/\/ This ensures there is only one \"caf√©.fr\".","toUnicode(\"xn--caf-dma.fr\")   \/\/ ‚úÖ \"caf√©.fr\" (\"caf\\u{00E9}\")","toUnicode(\"xn--cafe-yvc.fr\")  \/\/ ‚ùé <nil> - Not a valid IDN!"],"type":"codeListing"},{"level":2,"text":"Rendering Domains","anchor":"Rendering-Domains","type":"heading"},{"inlineContent":[{"type":"text","text":"Domains are often displayed in a context which establishes authority. For example, a person"},{"type":"text","text":" "},{"type":"text","text":"viewing an email from "},{"type":"codeVoice","code":"\"support@apple.com\""},{"type":"text","text":" expects the sender to represent Apple Inc."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Displaying Unicode text in such contexts should be considered carefully. It is possible for certain"},{"type":"text","text":" "},{"type":"text","text":"characters to appear visually similar, or even identically, to other characters - to the extent that"},{"type":"text","text":" "},{"type":"text","text":"readers may be mislead about the authority being established. "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.unicode.org\/reports\/tr36\/"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"reference","isActive":true,"identifier":"https:\/\/www.unicode.org\/reports\/tr39\/"},{"type":"text","text":" explain these issues in more detail, with examples."}],"type":"paragraph"},{"inlineContent":[{"text":"Applications can decide how this applies to them; perhaps they can consider which scripts the user is familiar","type":"text"},{"text":" ","type":"text"},{"text":"with, or perhaps they will render potentially-confusable labels with a different font or other UI marker.","type":"text"},{"text":" ","type":"text"},{"text":"Alternatively, they might render confusable labels as Punycode, although note that this can be counter-productive","type":"text"},{"text":" ","type":"text"},{"text":"(see UTR36). It‚Äôs a bit of an open question: how can we present text that is truly unambiguous, such that you","type":"text"},{"text":" ","type":"text"},{"text":"can trust its authority? The best answer we have so far is: do what makes sense in your context ü§∑‚Äç‚ôÇÔ∏è.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To facilitate high-level Unicode processing, this function takes a callback closure which visits each label","type":"text"},{"text":" ","type":"text"},{"text":"of the domain. Labels are provided to the closure as a buffer of canonicalized Unicode scalars","type":"text"},{"text":" ","type":"text"},{"text":"(i.e. NFC normalized, case-folded, and validated). The closure can then decide how it wishes to present","type":"text"},{"text":" ","type":"text"},{"text":"the Unicode label for display, or which flags it wishes to remember about this domain.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here‚Äôs how we might implement that. Let‚Äôs say we have a function, "},{"code":"DecidePresentationStrategyForLabel","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"which decides the best way to render a domain label in our UI, given our user‚Äôs locale preferences"},{"type":"text","text":" "},{"type":"text","text":"and other heuristics:"}],"type":"paragraph"},{"syntax":"swift","code":["func DecidePresentationStrategyForLabel(","  _ label: some RandomAccessCollection<Unicode.Scalar>",") -> PresentationStrategy {","  \/\/ Your logic here...","}","","func RenderDomain(_ input: String) -> String? {","  var result = \"\"","  let success = IDNA.toUnicode(utf8: input.utf8) { label, needsTrailingDot in","    switch DecidePresentationStrategyForLabel(label) {","    \/\/ Unicode presentation.","    case .unicode:","      result.unicodeScalars += label","","    \/\/ Punycode can also be a valid way to write this label.","    \/\/ Note that it can _also_ be ambiguous, so use with caution!","    case .punycode:","      Punycode.encode(label) { ascii in","        result.unicodeScalars.append(Unicode.Scalar(ascii))","      }","","    \/\/ Other context-appropriate responses, beyond Punycode...","    case .confusableWithKnownBrand:","      \/* Use AttributedString to force a certain font\/spacing\/color? *\/","      \/* Add an extra warning for certain actions, like making a purchase\/entering a password? *\/","    }","","    if needsTrailingDot { result += \".\" }","    return true","  }","  return success ? result : nil","}"],"type":"codeListing"},{"inlineContent":[{"text":"And then we would use that function to decide how to display the domain:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["RenderDomain(\"x.example.com\")","\/\/ ‚úÖ \"x.example.com\" (ASCII)","","RenderDomain(\"shop.xn--igbi0gl.com\")","\/\/ ‚úÖ \"shop.ÿ£ŸáŸÑÿß.com\"","","RenderDomain(\"√•pple.com\")","\/\/ ‚úÖ \"xn--pple-poa.com\", NOT \"√•pple.com\"","","RenderDomain(\"xn--citibank.com\")","\/\/ ‚úÖ \"Â≤çÂ≤äÂ≤äÂ≤ÖÂ≤âÂ≤é.com\" NOT \"xn--citibank.com\""],"type":"codeListing"},{"inlineContent":[{"text":"If an error occurs, the function will stop processing the domain and return ","type":"text"},{"code":"false","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"and any previously-written data should be discarded. The callback closure can also","type":"text"},{"text":" ","type":"text"},{"text":"signal a validation error and halt further processing by returning ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"text":"UTS46 Parameters","anchor":"UTS46-Parameters","type":"heading"},{"inlineContent":[{"text":"This function implements ","type":"text"},{"code":"\"domain to Unicode\"","type":"codeVoice"},{"text":" as defined by the ","type":"text"},{"identifier":"https:\/\/url.spec.whatwg.org\/#concept-domain-to-unicode","type":"reference","isActive":true},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"It is the same as the ","type":"text"},{"code":"ToUnicode","type":"codeVoice"},{"text":" function defined by ","type":"text"},{"identifier":"https:\/\/www.unicode.org\/reports\/tr46\/#ToUnicode","type":"reference","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"with parameters bound as follows:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"CheckHyphens","type":"codeVoice"},{"type":"text","text":" is "},{"code":"false","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"CheckBidi","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"true","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"CheckJoiners"},{"type":"text","text":" is "},{"type":"codeVoice","code":"true"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"UseSTD3ASCIIRules","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"false","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"Transitional_Processing"},{"type":"text","text":" is "},{"type":"codeVoice","code":"false"}],"type":"paragraph"}]}],"type":"unorderedList"}],"kind":"content"}],"sections":[],"kind":"symbol","variants":[{"paths":["\/documentation\/idna\/idna\/tounicode(utf8:writer:)"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toASCII(utf8:beStrict:writer:)"],"generated":true,"title":"IDNA Compatibility Processing"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/IDNA","doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA"]]},"references":{"https://www.unicode.org/reports/tr46/#ToUnicode":{"titleInlineContent":[{"text":"Unicode Technical Standard #46","type":"text"}],"identifier":"https:\/\/www.unicode.org\/reports\/tr46\/#ToUnicode","url":"https:\/\/www.unicode.org\/reports\/tr46\/#ToUnicode","type":"link","title":"Unicode Technical Standard #46"},"https://url.spec.whatwg.org/#concept-domain-to-unicode":{"titleInlineContent":[{"text":"WHATWG URL Standard","type":"text"}],"identifier":"https:\/\/url.spec.whatwg.org\/#concept-domain-to-unicode","url":"https:\/\/url.spec.whatwg.org\/#concept-domain-to-unicode","type":"link","title":"WHATWG URL Standard"},"doc://com.karwa.WebURL/documentation/IDNA":{"type":"topic","url":"\/documentation\/idna","abstract":[],"kind":"symbol","title":"IDNA","role":"collection","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA"},"doc://com.karwa.WebURL/documentation/IDNA/IDNA":{"abstract":[{"type":"text","text":"Functions relating to Internationalizing Domain Names for Applications (IDNA) compatibility processing."}],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IDNA","kind":"identifier"}],"navigatorTitle":[{"text":"IDNA","kind":"identifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"IDNA","url":"\/documentation\/idna\/idna"},"https://www.unicode.org/reports/tr39/":{"identifier":"https:\/\/www.unicode.org\/reports\/tr39\/","title":"Unicode Technical Standard #39","url":"https:\/\/www.unicode.org\/reports\/tr39\/","titleInlineContent":[{"text":"Unicode Technical Standard #39","type":"text"}],"type":"link"},"https://www.unicode.org/reports/tr36/":{"titleInlineContent":[{"text":"Unicode Technical Report #36","type":"text"}],"identifier":"https:\/\/www.unicode.org\/reports\/tr36\/","url":"https:\/\/www.unicode.org\/reports\/tr36\/","type":"link","title":"Unicode Technical Report #36"},"doc://com.karwa.WebURL/documentation/IDNA/IDNA/toUnicode(utf8:writer:)":{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toUnicode(utf8:writer:)","type":"topic","role":"symbol","kind":"symbol","title":"toUnicode(utf8:writer:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toUnicode","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Source","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"utf8","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Source","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"writer","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"AnyRandomAccessCollection","preciseIdentifier":"s:s25AnyRandomAccessCollectionV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Unicode","preciseIdentifier":"s:s7UnicodeO","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Scalar","preciseIdentifier":"s:s7UnicodeO6ScalarV","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"}],"url":"\/documentation\/idna\/idna\/tounicode(utf8:writer:)","abstract":[{"text":"Converts a domain to its canonical Unicode form.","type":"text"}]},"doc://com.karwa.WebURL/documentation/IDNA/IDNA/toASCII(utf8:beStrict:writer:)":{"abstract":[{"type":"text","text":"Converts a domain to its canonical ASCII form."}],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toASCII(utf8:beStrict:writer:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toASCII","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Source","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"utf8","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Source","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"beStrict","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"writer","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:s5UInt8V","text":"UInt8","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"}],"kind":"symbol","role":"symbol","type":"topic","title":"toASCII(utf8:beStrict:writer:)","url":"\/documentation\/idna\/idna\/toascii(utf8:bestrict:writer:)"}}}