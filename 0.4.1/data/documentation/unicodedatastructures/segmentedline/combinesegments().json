{"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"mutating"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"combineSegments","kind":"identifier"},{"text":"()","kind":"text"}],"languages":["swift"]}]},{"content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function can be particularly effective at simplifying lines with lots of segments, as by mapping"},{"type":"text","text":" "},{"type":"text","text":"complex values to simplified ones (for example, mapping to an "},{"code":"enum","type":"codeVoice"},{"type":"text","text":" with fewer cases) using "},{"isActive":true,"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"we can discard information that isn’t needed. This can lead to adjacent segments containing the same value"},{"type":"text","text":" "},{"type":"text","text":"more often - segments which can then be combined by this function."}]},{"code":["\/\/ ℹ️ Imagine we have a complex SegmentedLine with lots of small segments","\/\/    capturing granular details, and we'd like to simplify it.","","enum ComplexData {","  case categoryA, categoryB, categoryC \/\/ ...","}","let complexLine: SegmentedLine<Int, ComplexData> = \/\/ ...","print(complexLine)","\/\/ | [0..<2]: categoryA | [2..<4]: categoryB | [4..<12]: categoryC | ...","","\/\/ 1️⃣ Perhaps we can map these to a smaller number of states.","","enum SimplifiedData {","  case valid, invalid","}","var simplifiedLine = complexLine.mapValues { complex in","  SimplifiedData(validating: complex)","}","print(simplifiedLine)","\/\/ | [0..<2]: valid | [2..<4]: valid | [4..<12]: valid | ...","","\/\/ 2️⃣ Notice that we have lots of segments for boundaries which","\/\/    which are no longer important. 'combineSegments' can clean them up.","","simplifiedLine.combineSegments()","print(simplifiedLine)","\/\/ | [0..<2000]: valid | [2000..<2024]: invalid | [2024..<2056]: valid | ..."],"syntax":"swift","type":"codeListing"}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()"},"schemaVersion":{"major":0,"minor":3,"patch":0},"abstract":[{"type":"text","text":"Merges segments of consecutive equal elements."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()"]}],"sections":[],"metadata":{"title":"combineSegments()","externalID":"s:21UnicodeDataStructures13SegmentedLineVAASQR_rlE15combineSegmentsyyF","role":"symbol","roleHeading":"Instance Method","extendedModule":"UnicodeDataStructures","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"()"}],"modules":[{"name":"UnicodeDataStructures"}],"symbolKind":"method","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]}},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine"]]},"references":{"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments()":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"type":"topic","url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments()","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments()","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Merges segments of consecutive equal elements."}],"title":"combineSegments()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"()"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures":{"role":"collection","title":"UnicodeDataStructures","url":"\/documentation\/unicodedatastructures","type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","abstract":[],"kind":"symbol"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine":{"role":"symbol","title":"SegmentedLine","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","kind":"identifier"}],"url":"\/documentation\/unicodedatastructures\/segmentedline","type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","abstract":[{"text":"A ","type":"text"},{"code":"SegmentedLine","type":"codeVoice"},{"text":" is a one-dimensional space, where every location is assigned a value.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"SegmentedLine","kind":"identifier"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/mapValues(_:)":{"abstract":[{"text":"Returns a new ","type":"text"},{"code":"SegmentedLine","type":"codeVoice"},{"text":", created by transforming this line’s values using the given closure.","type":"text"}],"url":"\/documentation\/unicodedatastructures\/segmentedline\/mapvalues(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"mapValues","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":">"}],"title":"mapValues(_:)","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/mapValues(_:)","type":"topic","conformance":{"constraints":[{"code":"Bound","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"kind":"symbol","role":"symbol"}}}