{"kind":"symbol","variants":[{"paths":["\/documentation\/unicodedatastructures\/segmentedline\/combinesegments(while:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"externalID":"s:21UnicodeDataStructures13SegmentedLineV15combineSegments5whileySbSnyxG5range_q_5valuetz_AfG_q_AHttXE_tF","role":"symbol","roleHeading":"Instance Method","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"combineSegments","kind":"identifier"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Segments","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","kind":"typeIdentifier","text":"SegmentedLine"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">."},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","kind":"typeIdentifier","text":"Segments"},{"kind":"text","text":"."},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")"}],"extendedModule":"UnicodeDataStructures","symbolKind":"method","title":"combineSegments(while:)","modules":[{"name":"UnicodeDataStructures"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments(while:)"},"sections":[],"abstract":[{"text":"Merges segments according to the given closure.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"mutating","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"combineSegments","kind":"identifier"},{"text":"(","kind":"text"},{"text":"while","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"shouldMerge","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","text":"SegmentedLine","kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Segments","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","kind":"typeIdentifier","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Segments-swift.struct"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV","kind":"typeIdentifier","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine"},{"text":"<","kind":"text"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Segments","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","kind":"typeIdentifier","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Segments-swift.struct"},{"text":".","kind":"text"},{"text":"Element","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":")","kind":"text"}],"languages":["swift"]}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function implements a left-fold, similar to Collection’s "},{"type":"codeVoice","code":"reduce"},{"type":"text","text":", except that the folding closure"},{"type":"text","text":" "},{"type":"text","text":"can decide to preserve a segment break and reset the fold operation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The closure is invoked with two segments as arguments - an "},{"type":"codeVoice","code":"accumulator"},{"type":"text","text":", which has a mutable value,"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"next"},{"type":"text","text":", which is its successor on this line. Given these segments, the closure may decide:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"To combine "},{"code":"next","type":"codeVoice"},{"type":"text","text":" and "},{"code":"accumulator","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To fold segments, the closure performs any required adjustments to merge "},{"code":"next.value","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"in to "},{"code":"accumulator.value","type":"codeVoice"},{"type":"text","text":", and returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":". The segment "},{"code":"next","type":"codeVoice"},{"type":"text","text":" will be discarded,"},{"type":"text","text":" "},{"type":"text","text":"and the accumulator’s range will expand up to "},{"code":"next.range.upperBound","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Folding continues with the same accumulator for as long as the closure returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":";"},{"type":"text","text":" "},{"type":"text","text":"this process is similar to Collection’s "},{"code":"reduce(into:)","type":"codeVoice"},{"type":"text","text":" function."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"To maintain the segment break."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If it is not desirable to combine the segments, the closure may return "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This finalizes the current accumulator, and restarts folding with "},{"code":"next","type":"codeVoice"},{"type":"text","text":" as the new accumulator."}],"type":"paragraph"}]}]}]}],"references":{"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine":{"role":"symbol","title":"SegmentedLine","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SegmentedLine","kind":"identifier"}],"url":"\/documentation\/unicodedatastructures\/segmentedline","type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine","abstract":[{"text":"A ","type":"text"},{"code":"SegmentedLine","type":"codeVoice"},{"text":" is a one-dimensional space, where every location is assigned a value.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"SegmentedLine","kind":"identifier"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures":{"role":"collection","title":"UnicodeDataStructures","url":"\/documentation\/unicodedatastructures","type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures","abstract":[],"kind":"symbol"},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/combineSegments(while:)":{"url":"\/documentation\/unicodedatastructures\/segmentedline\/combinesegments(while:)","title":"combineSegments(while:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"combineSegments"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"SegmentedLine","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV"},{"kind":"text","text":"<"},{"text":"Bound","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Segments","kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa"},{"text":", ","kind":"text"},{"text":"SegmentedLine","kind":"typeIdentifier","preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Bound"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">."},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV","kind":"typeIdentifier","text":"Segments"},{"kind":"text","text":"."},{"preciseIdentifier":"s:21UnicodeDataStructures13SegmentedLineV8SegmentsV7Elementa","kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":")"}],"type":"topic","kind":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Bound"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/combineSegments(while:)","role":"symbol","abstract":[{"text":"Merges segments according to the given closure.","type":"text"}]},"doc://com.karwa.WebURL/documentation/UnicodeDataStructures/SegmentedLine/Segments-swift.struct":{"role":"symbol","title":"SegmentedLine.Segments","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Segments","kind":"identifier"}],"url":"\/documentation\/unicodedatastructures\/segmentedline\/segments-swift.struct","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Bound","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/UnicodeDataStructures\/SegmentedLine\/Segments-swift.struct","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"Segments","kind":"identifier"}]}}}