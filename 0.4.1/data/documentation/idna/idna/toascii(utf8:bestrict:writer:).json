{"schemaVersion":{"minor":3,"patch":0,"major":0},"seeAlsoSections":[{"generated":true,"title":"IDNA Compatibility Processing","identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toUnicode(utf8:writer:)"]}],"metadata":{"roleHeading":"Type Method","externalID":"s:4IDNAAAO7toASCII4utf88beStrict6writerSbx_Sbys5UInt8VXEtSlRzAH7ElementRtzlFZ","role":"symbol","symbolKind":"method","title":"toASCII(utf8:beStrict:writer:)","modules":[{"name":"IDNA"}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toASCII"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"utf8"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"beStrict"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"writer"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"UInt8","preciseIdentifier":"s:s5UInt8V"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"extendedModule":"IDNA"},"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/IDNA","doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA"]]},"sections":[],"abstract":[{"type":"text","text":"Converts a domain to its canonical ASCII form."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toASCII","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Source","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"utf8","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"source","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Source","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"beStrict","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":" = false, ","kind":"text"},{"text":"writer","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"UInt8","preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":" ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Source","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Collection","preciseIdentifier":"s:Sl","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Source","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":" == ","kind":"text"},{"text":"UInt8","preciseIdentifier":"s:s5UInt8V","kind":"typeIdentifier"}]}]},{"kind":"content","content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"Whether or not the operation was successful.","type":"text"},{"text":" ","type":"text"},{"text":"If ","type":"text"},{"type":"codeVoice","code":"false"},{"text":", the given domain is not valid, and any data previously yielded to ","type":"text"},{"type":"codeVoice","code":"writer"},{"text":" ","type":"text"},{"text":"should be discarded.","type":"text"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A domain in either Unicode or ASCII form, expressed as a Collection of UTF-8 code-units."}]}],"name":"utf8"},{"content":[{"inlineContent":[{"text":"If ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", limits allowed domain names as described by STD3\/RFC-1122 - i.e. ASCII letters, digits,","type":"text"},{"text":" ","type":"text"},{"text":"and hyphens only (LHD). URLs do not assume STD3 name restrictions apply, and have a","type":"text"},{"text":" ","type":"text"},{"text":"less restrictive set of disallowed characters based on URL syntax requirements","type":"text"},{"text":" ","type":"text"},{"text":"(for example, they allow underscores, such as in ","type":"text"},{"code":"\"http:\/\/some_hostname\/\"","type":"codeVoice"},{"text":", whereas STD3 does not).","type":"text"},{"text":" ","type":"text"},{"text":"The default is ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"beStrict"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure which receives the ASCII bytes emitted by this function."}]}],"name":"writer"}]},{"kind":"content","content":[{"text":"Discussion","type":"heading","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The domain may be given in ASCII or Unicode form. This function will perform all required"},{"type":"text","text":" "},{"type":"text","text":"compatibility processing, including mapping and case-folding, normalization, Punycode decoding, etc."},{"type":"text","text":" "},{"type":"text","text":"Finally, each label and the entire domain are validated, and the result is encoded as ASCII using"},{"type":"text","text":" "},{"type":"text","text":"the Punycode encoding."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function is idempotent, so if it is applied to a domain that is already in canonical ASCII form,"},{"type":"text","text":" "},{"type":"text","text":"it just produces the same value, unchanged."}]},{"type":"codeListing","code":["\/\/ ASCII domains.","toASCII(\"example.com\")  \/\/ ‚úÖ \"example.com\"","","\/\/ Unicode.","toASCII(\"we‚ù§Ô∏èswift\")        \/\/ ‚úÖ \"xn--weswift-z98d\"","toASCII(\"api.‰Ω†Â•Ω‰Ω†Â•Ω.com\")  \/\/ ‚úÖ \"api.xn--6qqa088eba.com\"","","\/\/ Idempotent.","toASCII(\"api.xn--6qqa088eba.com\") \/\/ ‚úÖ \"api.xn--6qqa088eba.com\"","","\/\/ Normalizes Unicode domains.","toASCII(\"caf\\u{00E9}.fr\")   \/\/ ‚úÖ \"xn--caf-dma.fr\"","toASCII(\"cafe\\u{0301}.fr\")  \/\/ ‚úÖ \"xn--caf-dma.fr\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Validation ensures that domains are NFC normalized and case-folded, and enforces some rules"},{"type":"text","text":" "},{"type":"text","text":"with regards to use of joiners and bidirectional text."}]},{"type":"codeListing","code":["\/\/ Zero-width joiners and non-joiners are only allowed in certain contexts.","let notApple = \"a\\u{200C}pple.com\"     \/\/ ü•∏ Hey! There's a zero-width non-joiner hiding there!","print(notApple)           \"a‚Äåpple.com\"  \/\/ To a human, it looks like \"apple.com\"","print(notApple == \"apple.com\")  false  \/\/ A computer knows it ISN'T \"apple.com\"","toASCII(\"a\\u{200C}pple.com\")    <nil>  \/\/ ‚ùé Not a valid IDN!","","\/\/ \"xn--cafe-yvc\" is how you would Punycode \"cafe\\u{0301}\" (the non-NFC \"caf√©\").","\/\/ This ensures there is only one \"caf√©.fr\".","toASCII(\"xn--caf-dma.fr\")   \/\/ ‚úÖ \"xn--caf-dma.fr\" - valid IDN","toASCII(\"xn--cafe-yvc.fr\")  \/\/ ‚ùé <nil> - Not a valid IDN!"],"syntax":"swift"},{"text":"Rendering Domains","type":"heading","anchor":"Rendering-Domains","level":2},{"type":"paragraph","inlineContent":[{"text":"Although the ASCII representation is less commonly used to render a domain,","type":"text"},{"text":" ","type":"text"},{"text":"it is still worth considering carefully whether it is an appropriate presentation for the context:","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In particular, note that in situations such as ","type":"text"},{"code":"\"Â≤çÂ≤äÂ≤äÂ≤ÖÂ≤âÂ≤é.com\"","type":"codeVoice"},{"text":" (or ","type":"text"},{"code":"\"xn--citibank.com\"","type":"codeVoice"},{"text":"),","type":"text"},{"text":" ","type":"text"},{"text":"the ASCII representation may do more to mislead than the Unicode representation. For more information","type":"text"},{"text":" ","type":"text"},{"text":"about rendering domains for display, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toUnicode(utf8:writer:)"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This function emits the ASCII bytes of the result using a callback closure. To construct the full domain,","type":"text"},{"text":" ","type":"text"},{"text":"the bytes can be written to a buffer or appended to a string as individual scalars.","type":"text"}]},{"type":"codeListing","code":["func idna_encode(_ input: String) -> String? {","  var buffer = [UInt8]()","  let success = IDNA.toASCII(utf8: input.utf8) { ascii in","    buffer.append(ascii)","  }","  return success ? String(decoding: buffer, as: UTF8.self) : nil","}","","idna_encode(\"x.example.com\")","\/\/ ‚úÖ \"x.example.com\" (ASCII)","","idna_encode(\"shop.ÿ£ŸáŸÑÿß.com\")","\/\/ ‚úÖ \"shop.xn--igbi0gl.com\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If an error occurs, the function will stop processing the domain and return "},{"code":"false","type":"codeVoice"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"and any previously-written data should be discarded."}]},{"text":"UTS46 Parameters","type":"heading","anchor":"UTS46-Parameters","level":3},{"type":"paragraph","inlineContent":[{"text":"This function implements ","type":"text"},{"type":"codeVoice","code":"\"domain to ASCII\""},{"text":" as defined by the ","type":"text"},{"type":"reference","identifier":"https:\/\/url.spec.whatwg.org\/#concept-domain-to-ascii","isActive":true},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"It is the same as the ","type":"text"},{"type":"codeVoice","code":"ToASCII"},{"text":" function defined by ","type":"text"},{"type":"reference","identifier":"https:\/\/www.unicode.org\/reports\/tr46\/#ToASCII","isActive":true},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"with parameters bound as follows:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"CheckHyphens"},{"type":"text","text":" is "},{"type":"codeVoice","code":"false"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"CheckBidi","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"true","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"CheckJoiners"},{"type":"text","text":" is "},{"type":"codeVoice","code":"true"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"UseSTD3ASCIIRules","type":"codeVoice"},{"text":" is given by the parameter ","type":"text"},{"code":"beStrict","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Transitional_Processing"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"false"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Additionally, for this implementation, ","type":"text"},{"type":"codeVoice","code":"VerifyDnsLength"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"false"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"URLs do not enforce DNS length limits, so it is not necessary for users of this API who wish to process","type":"text"},{"text":" ","type":"text"},{"text":"domains as URLs do.","type":"text"}]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/idna\/idna\/toascii(utf8:bestrict:writer:)"]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toASCII(utf8:beStrict:writer:)"},"references":{"doc://com.karwa.WebURL/documentation/IDNA/IDNA/toUnicode(utf8:writer:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"toUnicode"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"utf8"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"writer"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:s25AnyRandomAccessCollectionV","text":"AnyRandomAccessCollection"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Unicode","preciseIdentifier":"s:s7UnicodeO"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Scalar","preciseIdentifier":"s:s7UnicodeO6ScalarV"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"}],"abstract":[{"type":"text","text":"Converts a domain to its canonical Unicode form."}],"title":"toUnicode(utf8:writer:)","url":"\/documentation\/idna\/idna\/tounicode(utf8:writer:)","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toUnicode(utf8:writer:)","type":"topic"},"doc://com.karwa.WebURL/documentation/IDNA/IDNA":{"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"IDNA"}],"abstract":[{"text":"Functions relating to Internationalizing Domain Names for Applications (IDNA) compatibility processing.","type":"text"}],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA","url":"\/documentation\/idna\/idna","kind":"symbol","type":"topic","title":"IDNA","navigatorTitle":[{"kind":"identifier","text":"IDNA"}]},"doc://com.karwa.WebURL/documentation/IDNA":{"role":"collection","abstract":[],"identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA","url":"\/documentation\/idna","kind":"symbol","type":"topic","title":"IDNA"},"doc://com.karwa.WebURL/documentation/IDNA/IDNA/toASCII(utf8:beStrict:writer:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"toASCII","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Source"},{"kind":"text","text":">("},{"kind":"externalParam","text":"utf8"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":", "},{"kind":"externalParam","text":"beStrict"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"writer"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:s5UInt8V","text":"UInt8"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"}],"abstract":[{"type":"text","text":"Converts a domain to its canonical ASCII form."}],"title":"toASCII(utf8:beStrict:writer:)","url":"\/documentation\/idna\/idna\/toascii(utf8:bestrict:writer:)","kind":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/IDNA\/IDNA\/toASCII(utf8:beStrict:writer:)","type":"topic"},"https://url.spec.whatwg.org/#concept-domain-to-ascii":{"title":"WHATWG URL Standard","titleInlineContent":[{"text":"WHATWG URL Standard","type":"text"}],"type":"link","url":"https:\/\/url.spec.whatwg.org\/#concept-domain-to-ascii","identifier":"https:\/\/url.spec.whatwg.org\/#concept-domain-to-ascii"},"https://www.unicode.org/reports/tr46/#ToASCII":{"title":"Unicode Technical Standard #46","titleInlineContent":[{"text":"Unicode Technical Standard #46","type":"text"}],"type":"link","url":"https:\/\/www.unicode.org\/reports\/tr46\/#ToASCII","identifier":"https:\/\/www.unicode.org\/reports\/tr46\/#ToASCII"}}}