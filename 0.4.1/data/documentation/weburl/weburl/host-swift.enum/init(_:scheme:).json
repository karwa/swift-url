{"metadata":{"modules":[{"name":"WebURL"}],"title":"init(_:scheme:)","symbolKind":"init","roleHeading":"Initializer","fragments":[{"text":"init","kind":"identifier"},{"text":"?<","kind":"text"},{"text":"StringType","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"StringType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"scheme","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":")"}],"role":"symbol","externalID":"s:6WebURLAAV4HostO_6schemeADSgx_SStcSyRzlufc","extendedModule":"WebURL"},"hierarchy":{"paths":[["doc:\/\/com.karwa.WebURL\/documentation\/WebURL","doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL","doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum"]]},"seeAlsoSections":[{"title":"Parsing a Host from a String and Context","generated":true,"identifiers":["doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum\/init(utf8:scheme:)"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"init","kind":"keyword"},{"text":"?<","kind":"text"},{"text":"StringType","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"string","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"StringType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"scheme","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":") ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StringType","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"StringProtocol","kind":"typeIdentifier","preciseIdentifier":"s:Sy"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The string to parse."}],"type":"paragraph"}],"name":"string"},{"content":[{"inlineContent":[{"text":"The URL scheme which provides the context for interpreting the given string.","type":"text"}],"type":"paragraph"}],"name":"scheme"}],"kind":"parameters"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"text":"In general, the URL Standard considers hosts to simply be opaque strings;","type":"text"},{"text":" ","type":"text"},{"text":"for example, in the URL ","type":"text"},{"code":"redis:\/\/some_host\/42","type":"codeVoice"},{"text":", the way in which ","type":"text"},{"code":"\"some_host\"","type":"codeVoice"},{"text":" is interpreted","type":"text"},{"text":" ","type":"text"},{"text":"is an implementation detail of the ","type":"text"},{"code":"\"redis:\"","type":"codeVoice"},{"text":" URL scheme and request library being used -","type":"text"},{"text":" ","type":"text"},{"text":"it might be some kind of network address, a path to a local file, a device\/application ID, etc.","type":"text"},{"text":" ","type":"text"},{"text":"It is up to the request library to parse the identifier and decide which kind of host it is,","type":"text"},{"text":" ","type":"text"},{"text":"or if it is even valid.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, a few URL schemes (such as "},{"type":"codeVoice","code":"\"http(s):\""},{"type":"text","text":" and "},{"type":"codeVoice","code":"\"file:\""},{"type":"text","text":") are known to the URL Standard,"},{"type":"text","text":" "},{"type":"text","text":"and it is necessary that all implementations interpret their hosts as specific, supported network addresses."},{"type":"text","text":" "},{"type":"text","text":"For example, hostnames containing Unicode characters must be converted to ASCII using"},{"type":"text","text":" "},{"type":"text","text":"a special compatibility processing known as IDNA, and certain numerical hostnames (like "},{"type":"codeVoice","code":"\"127.0.0.1\""},{"type":"text","text":")"},{"type":"text","text":" "},{"type":"text","text":"are interpreted as IPv4 addresses."}],"type":"paragraph"},{"inlineContent":[{"text":"This initializer allows you to understand, validate, and normalize hostnames","type":"text"},{"text":" ","type":"text"},{"text":"using the ","type":"text"},{"identifier":"https:\/\/url.spec.whatwg.org\/#concept-host-parser","type":"reference","isActive":true},{"text":" from the URL Standard, in the context of the given ","type":"text"},{"type":"codeVoice","code":"scheme"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["\/\/ For custom URL schemes (e.g. redis:\/mongodb:\/etc URLs),","\/\/ the URL Standard generally considers hostnames to be opaque.","\/\/ Request libraries have to parse the hostname themselves","\/\/ to figure out what it means.","","WebURL.Host(\"EXAMPLE.com\", scheme: \"foo\")","\/\/ üòê .opaque, \"EXAMPLE.com\"","","WebURL.Host(\"abc.ÿ£ŸáŸÑÿß.com\", scheme: \"foo\")","\/\/ üòï .opaque, \"abc.%D8%A3%D9%87%D9%84%D8%A7.com\"","","WebURL.Host(\"192.168.0.1\", scheme: \"foo\")","\/\/ ü§® .opaque, \"192.168.0.1\"","","\/\/ Matching the behavior of HTTP URLs can be very useful -","\/\/ especially as it comes with Unicode domain names (IDNA)","\/\/ and IPv4 support.","","WebURL.Host(\"EXAMPLE.com\", scheme: \"http\")","\/\/ üòç .domain, Domain { \"example.com\" }","","WebURL.Host(\"abc.ÿ£ŸáŸÑÿß.com\", scheme: \"http\")","\/\/ ü§© .domain, Domain { \"abc.xn--igbi0gl.com\" }","","WebURL.Host(\"192.168.0.1\", scheme: \"http\")","\/\/ ü•≥ .ipv4Address, IPv4Address { 192.168.0.1 }"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"If the host is not valid for the given scheme, this initializer fails and returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum"},{"text":" documentation has more information about","type":"text"},{"text":" ","type":"text"},{"text":"which kinds of hosts are supported for each ","type":"text"},{"type":"codeVoice","code":"scheme"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"sections":[],"abstract":[{"type":"text","text":"Parses a hostname in the context of a given URL scheme."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum\/init(_:scheme:)"},"variants":[{"paths":["\/documentation\/weburl\/weburl\/host-swift.enum\/init(_:scheme:)"],"traits":[{"interfaceLanguage":"swift"}]}],"kind":"symbol","references":{"https://url.spec.whatwg.org/#concept-host-parser":{"url":"https:\/\/url.spec.whatwg.org\/#concept-host-parser","identifier":"https:\/\/url.spec.whatwg.org\/#concept-host-parser","type":"link","title":"host parser","titleInlineContent":[{"text":"host parser","type":"text"}]},"doc://com.karwa.WebURL/documentation/WebURL/WebURL/Host-swift.enum/init(_:scheme:)":{"type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum\/init(_:scheme:)","fragments":[{"text":"init","kind":"identifier"},{"text":"?<","kind":"text"},{"text":"StringType","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"StringType","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"scheme","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":")","kind":"text"}],"kind":"symbol","title":"init(_:scheme:)","role":"symbol","url":"\/documentation\/weburl\/weburl\/host-swift.enum\/init(_:scheme:)","abstract":[{"text":"Parses a hostname in the context of a given URL scheme.","type":"text"}]},"doc://com.karwa.WebURL/documentation/WebURL/WebURL":{"title":"WebURL","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL","role":"symbol","url":"\/documentation\/weburl\/weburl","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"WebURL"}],"abstract":[{"type":"text","text":"A Uniform Resource Locator (URL) is a universal identifier,"},{"type":"text","text":" "},{"type":"text","text":"which often describes the location of a resource."}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"WebURL"}]},"doc://com.karwa.WebURL/documentation/WebURL/WebURL/Host-swift.enum":{"type":"topic","kind":"symbol","url":"\/documentation\/weburl\/weburl\/host-swift.enum","abstract":[{"text":"A host, as interpreted by the URL Standard. A host is a network address or opaque identifier.","type":"text"}],"role":"symbol","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Host"}],"navigatorTitle":[{"kind":"identifier","text":"Host"}],"title":"WebURL.Host"},"doc://com.karwa.WebURL/documentation/WebURL":{"role":"collection","title":"WebURL","url":"\/documentation\/weburl","type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL","abstract":[{"type":"text","text":"A new URL type for Swift."}],"kind":"symbol"},"doc://com.karwa.WebURL/documentation/WebURL/WebURL/Host-swift.enum/init(utf8:scheme:)":{"type":"topic","identifier":"doc:\/\/com.karwa.WebURL\/documentation\/WebURL\/WebURL\/Host-swift.enum\/init(utf8:scheme:)","fragments":[{"text":"init","kind":"identifier"},{"text":"?<","kind":"text"},{"text":"UTF8Bytes","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"utf8","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UTF8Bytes","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"scheme","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":")","kind":"text"}],"kind":"symbol","title":"init(utf8:scheme:)","role":"symbol","url":"\/documentation\/weburl\/weburl\/host-swift.enum\/init(utf8:scheme:)","abstract":[{"text":"Parses a hostname string from a collection of UTF-8 code-units.","type":"text"}]}}}